
uart_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a50  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08005be8  08005be8  00006be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c1c  08005c1c  0000704c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c1c  08005c1c  00006c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c24  08005c24  0000704c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c24  08005c24  00006c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c28  08005c28  00006c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08005c2c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000004c  08005c78  0000704c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08005c78  0000720c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e900  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000208e  00000000  00000000  0001597c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00017a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a62  00000000  00000000  00018768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016940  00000000  00000000  000191ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f717  00000000  00000000  0002fb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e7d1  00000000  00000000  0003f221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd9f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003908  00000000  00000000  000cda38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d1340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000004c 	.word	0x2000004c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005bd0 	.word	0x08005bd0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000050 	.word	0x20000050
 80001d4:	08005bd0 	.word	0x08005bd0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b988 	b.w	8000d2c <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	468e      	mov	lr, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	4688      	mov	r8, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d962      	bls.n	8000b10 <__udivmoddi4+0xdc>
 8000a4a:	fab2 f682 	clz	r6, r2
 8000a4e:	b14e      	cbz	r6, 8000a64 <__udivmoddi4+0x30>
 8000a50:	f1c6 0320 	rsb	r3, r6, #32
 8000a54:	fa01 f806 	lsl.w	r8, r1, r6
 8000a58:	fa20 f303 	lsr.w	r3, r0, r3
 8000a5c:	40b7      	lsls	r7, r6
 8000a5e:	ea43 0808 	orr.w	r8, r3, r8
 8000a62:	40b4      	lsls	r4, r6
 8000a64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a68:	fa1f fc87 	uxth.w	ip, r7
 8000a6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a70:	0c23      	lsrs	r3, r4, #16
 8000a72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a88:	f080 80ea 	bcs.w	8000c60 <__udivmoddi4+0x22c>
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	f240 80e7 	bls.w	8000c60 <__udivmoddi4+0x22c>
 8000a92:	3902      	subs	r1, #2
 8000a94:	443b      	add	r3, r7
 8000a96:	1a9a      	subs	r2, r3, r2
 8000a98:	b2a3      	uxth	r3, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aa6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aaa:	459c      	cmp	ip, r3
 8000aac:	d909      	bls.n	8000ac2 <__udivmoddi4+0x8e>
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab4:	f080 80d6 	bcs.w	8000c64 <__udivmoddi4+0x230>
 8000ab8:	459c      	cmp	ip, r3
 8000aba:	f240 80d3 	bls.w	8000c64 <__udivmoddi4+0x230>
 8000abe:	443b      	add	r3, r7
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac6:	eba3 030c 	sub.w	r3, r3, ip
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11d      	cbz	r5, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40f3      	lsrs	r3, r6
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d905      	bls.n	8000aea <__udivmoddi4+0xb6>
 8000ade:	b10d      	cbz	r5, 8000ae4 <__udivmoddi4+0xb0>
 8000ae0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e7f5      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000aea:	fab3 f183 	clz	r1, r3
 8000aee:	2900      	cmp	r1, #0
 8000af0:	d146      	bne.n	8000b80 <__udivmoddi4+0x14c>
 8000af2:	4573      	cmp	r3, lr
 8000af4:	d302      	bcc.n	8000afc <__udivmoddi4+0xc8>
 8000af6:	4282      	cmp	r2, r0
 8000af8:	f200 8105 	bhi.w	8000d06 <__udivmoddi4+0x2d2>
 8000afc:	1a84      	subs	r4, r0, r2
 8000afe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b02:	2001      	movs	r0, #1
 8000b04:	4690      	mov	r8, r2
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d0e5      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b0e:	e7e2      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f000 8090 	beq.w	8000c36 <__udivmoddi4+0x202>
 8000b16:	fab2 f682 	clz	r6, r2
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	f040 80a4 	bne.w	8000c68 <__udivmoddi4+0x234>
 8000b20:	1a8a      	subs	r2, r1, r2
 8000b22:	0c03      	lsrs	r3, r0, #16
 8000b24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b28:	b280      	uxth	r0, r0
 8000b2a:	b2bc      	uxth	r4, r7
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d907      	bls.n	8000b52 <__udivmoddi4+0x11e>
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x11c>
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	f200 80e0 	bhi.w	8000d10 <__udivmoddi4+0x2dc>
 8000b50:	46c4      	mov	ip, r8
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b60:	fb02 f404 	mul.w	r4, r2, r4
 8000b64:	429c      	cmp	r4, r3
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x144>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x142>
 8000b70:	429c      	cmp	r4, r3
 8000b72:	f200 80ca 	bhi.w	8000d0a <__udivmoddi4+0x2d6>
 8000b76:	4602      	mov	r2, r0
 8000b78:	1b1b      	subs	r3, r3, r4
 8000b7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b7e:	e7a5      	b.n	8000acc <__udivmoddi4+0x98>
 8000b80:	f1c1 0620 	rsb	r6, r1, #32
 8000b84:	408b      	lsls	r3, r1
 8000b86:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8a:	431f      	orrs	r7, r3
 8000b8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b90:	fa20 f306 	lsr.w	r3, r0, r6
 8000b94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b9c:	4323      	orrs	r3, r4
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	fa1f fc87 	uxth.w	ip, r7
 8000ba6:	fbbe f0f9 	udiv	r0, lr, r9
 8000baa:	0c1c      	lsrs	r4, r3, #16
 8000bac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	fa02 f201 	lsl.w	r2, r2, r1
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x1a0>
 8000bc0:	193c      	adds	r4, r7, r4
 8000bc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bc6:	f080 809c 	bcs.w	8000d02 <__udivmoddi4+0x2ce>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f240 8099 	bls.w	8000d02 <__udivmoddi4+0x2ce>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	443c      	add	r4, r7
 8000bd4:	eba4 040e 	sub.w	r4, r4, lr
 8000bd8:	fa1f fe83 	uxth.w	lr, r3
 8000bdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000be0:	fb09 4413 	mls	r4, r9, r3, r4
 8000be4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000be8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bec:	45a4      	cmp	ip, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x1ce>
 8000bf0:	193c      	adds	r4, r7, r4
 8000bf2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bf6:	f080 8082 	bcs.w	8000cfe <__udivmoddi4+0x2ca>
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d97f      	bls.n	8000cfe <__udivmoddi4+0x2ca>
 8000bfe:	3b02      	subs	r3, #2
 8000c00:	443c      	add	r4, r7
 8000c02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c06:	eba4 040c 	sub.w	r4, r4, ip
 8000c0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c0e:	4564      	cmp	r4, ip
 8000c10:	4673      	mov	r3, lr
 8000c12:	46e1      	mov	r9, ip
 8000c14:	d362      	bcc.n	8000cdc <__udivmoddi4+0x2a8>
 8000c16:	d05f      	beq.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c18:	b15d      	cbz	r5, 8000c32 <__udivmoddi4+0x1fe>
 8000c1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c22:	fa04 f606 	lsl.w	r6, r4, r6
 8000c26:	fa22 f301 	lsr.w	r3, r2, r1
 8000c2a:	431e      	orrs	r6, r3
 8000c2c:	40cc      	lsrs	r4, r1
 8000c2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c32:	2100      	movs	r1, #0
 8000c34:	e74f      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000c36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c3a:	0c01      	lsrs	r1, r0, #16
 8000c3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c40:	b280      	uxth	r0, r0
 8000c42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c46:	463b      	mov	r3, r7
 8000c48:	4638      	mov	r0, r7
 8000c4a:	463c      	mov	r4, r7
 8000c4c:	46b8      	mov	r8, r7
 8000c4e:	46be      	mov	lr, r7
 8000c50:	2620      	movs	r6, #32
 8000c52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c56:	eba2 0208 	sub.w	r2, r2, r8
 8000c5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c5e:	e766      	b.n	8000b2e <__udivmoddi4+0xfa>
 8000c60:	4601      	mov	r1, r0
 8000c62:	e718      	b.n	8000a96 <__udivmoddi4+0x62>
 8000c64:	4610      	mov	r0, r2
 8000c66:	e72c      	b.n	8000ac2 <__udivmoddi4+0x8e>
 8000c68:	f1c6 0220 	rsb	r2, r6, #32
 8000c6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c70:	40b7      	lsls	r7, r6
 8000c72:	40b1      	lsls	r1, r6
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c82:	b2bc      	uxth	r4, r7
 8000c84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c88:	0c11      	lsrs	r1, r2, #16
 8000c8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8e:	fb08 f904 	mul.w	r9, r8, r4
 8000c92:	40b0      	lsls	r0, r6
 8000c94:	4589      	cmp	r9, r1
 8000c96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c9a:	b280      	uxth	r0, r0
 8000c9c:	d93e      	bls.n	8000d1c <__udivmoddi4+0x2e8>
 8000c9e:	1879      	adds	r1, r7, r1
 8000ca0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ca4:	d201      	bcs.n	8000caa <__udivmoddi4+0x276>
 8000ca6:	4589      	cmp	r9, r1
 8000ca8:	d81f      	bhi.n	8000cea <__udivmoddi4+0x2b6>
 8000caa:	eba1 0109 	sub.w	r1, r1, r9
 8000cae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb2:	fb09 f804 	mul.w	r8, r9, r4
 8000cb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cba:	b292      	uxth	r2, r2
 8000cbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc0:	4542      	cmp	r2, r8
 8000cc2:	d229      	bcs.n	8000d18 <__udivmoddi4+0x2e4>
 8000cc4:	18ba      	adds	r2, r7, r2
 8000cc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cca:	d2c4      	bcs.n	8000c56 <__udivmoddi4+0x222>
 8000ccc:	4542      	cmp	r2, r8
 8000cce:	d2c2      	bcs.n	8000c56 <__udivmoddi4+0x222>
 8000cd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000cd4:	443a      	add	r2, r7
 8000cd6:	e7be      	b.n	8000c56 <__udivmoddi4+0x222>
 8000cd8:	45f0      	cmp	r8, lr
 8000cda:	d29d      	bcs.n	8000c18 <__udivmoddi4+0x1e4>
 8000cdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ce0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ce4:	3801      	subs	r0, #1
 8000ce6:	46e1      	mov	r9, ip
 8000ce8:	e796      	b.n	8000c18 <__udivmoddi4+0x1e4>
 8000cea:	eba7 0909 	sub.w	r9, r7, r9
 8000cee:	4449      	add	r1, r9
 8000cf0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cf4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf8:	fb09 f804 	mul.w	r8, r9, r4
 8000cfc:	e7db      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000cfe:	4673      	mov	r3, lr
 8000d00:	e77f      	b.n	8000c02 <__udivmoddi4+0x1ce>
 8000d02:	4650      	mov	r0, sl
 8000d04:	e766      	b.n	8000bd4 <__udivmoddi4+0x1a0>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e6fd      	b.n	8000b06 <__udivmoddi4+0xd2>
 8000d0a:	443b      	add	r3, r7
 8000d0c:	3a02      	subs	r2, #2
 8000d0e:	e733      	b.n	8000b78 <__udivmoddi4+0x144>
 8000d10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d14:	443b      	add	r3, r7
 8000d16:	e71c      	b.n	8000b52 <__udivmoddi4+0x11e>
 8000d18:	4649      	mov	r1, r9
 8000d1a:	e79c      	b.n	8000c56 <__udivmoddi4+0x222>
 8000d1c:	eba1 0109 	sub.w	r1, r1, r9
 8000d20:	46c4      	mov	ip, r8
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fb09 f804 	mul.w	r8, r9, r4
 8000d2a:	e7c4      	b.n	8000cb6 <__udivmoddi4+0x282>

08000d2c <__aeabi_idiv0>:
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000d34:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <DWT_Delay_Init+0x58>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	4a13      	ldr	r2, [pc, #76]	@ (8000d88 <DWT_Delay_Init+0x58>)
 8000d3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000d3e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <DWT_Delay_Init+0x58>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	4a10      	ldr	r2, [pc, #64]	@ (8000d88 <DWT_Delay_Init+0x58>)
 8000d46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d4a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <DWT_Delay_Init+0x5c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0e      	ldr	r2, [pc, #56]	@ (8000d8c <DWT_Delay_Init+0x5c>)
 8000d52:	f023 0301 	bic.w	r3, r3, #1
 8000d56:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <DWT_Delay_Init+0x5c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d8c <DWT_Delay_Init+0x5c>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <DWT_Delay_Init+0x5c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000d6a:	bf00      	nop
    __ASM volatile ("NOP");
 8000d6c:	bf00      	nop
    __ASM volatile ("NOP");
 8000d6e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <DWT_Delay_Init+0x5c>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e000      	b.n	8000d7e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000d7c:	2301      	movs	r3, #1
    }
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000edf0 	.word	0xe000edf0
 8000d8c:	e0001000 	.word	0xe0001000

08000d90 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000dac:	2300      	movs	r3, #0
 8000dae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    DWT_Delay_Init();
 8000db2:	f7ff ffbd 	bl	8000d30 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000dbc:	e109      	b.n	8000fd2 <STEPPERS_Init+0x242>
    {
    	for(j=0; j<4; j++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000dc4:	e07f      	b.n	8000ec6 <STEPPERS_Init+0x136>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8000dc6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000dca:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8000dce:	4886      	ldr	r0, [pc, #536]	@ (8000fe8 <STEPPERS_Init+0x258>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	1a9b      	subs	r3, r3, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000ddc:	4a83      	ldr	r2, [pc, #524]	@ (8000fec <STEPPERS_Init+0x25c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10e      	bne.n	8000e00 <STEPPERS_Init+0x70>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b82      	ldr	r3, [pc, #520]	@ (8000ff0 <STEPPERS_Init+0x260>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a81      	ldr	r2, [pc, #516]	@ (8000ff0 <STEPPERS_Init+0x260>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b7f      	ldr	r3, [pc, #508]	@ (8000ff0 <STEPPERS_Init+0x260>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	e038      	b.n	8000e72 <STEPPERS_Init+0xe2>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8000e00:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e04:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8000e08:	4877      	ldr	r0, [pc, #476]	@ (8000fe8 <STEPPERS_Init+0x258>)
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000e16:	4a77      	ldr	r2, [pc, #476]	@ (8000ff4 <STEPPERS_Init+0x264>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d10e      	bne.n	8000e3a <STEPPERS_Init+0xaa>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	4b73      	ldr	r3, [pc, #460]	@ (8000ff0 <STEPPERS_Init+0x260>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	4a72      	ldr	r2, [pc, #456]	@ (8000ff0 <STEPPERS_Init+0x260>)
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2c:	4b70      	ldr	r3, [pc, #448]	@ (8000ff0 <STEPPERS_Init+0x260>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	e01b      	b.n	8000e72 <STEPPERS_Init+0xe2>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8000e3a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e3e:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8000e42:	4869      	ldr	r0, [pc, #420]	@ (8000fe8 <STEPPERS_Init+0x258>)
 8000e44:	4613      	mov	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	1a9b      	subs	r3, r3, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000e50:	4a69      	ldr	r2, [pc, #420]	@ (8000ff8 <STEPPERS_Init+0x268>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10d      	bne.n	8000e72 <STEPPERS_Init+0xe2>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b65      	ldr	r3, [pc, #404]	@ (8000ff0 <STEPPERS_Init+0x260>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a64      	ldr	r2, [pc, #400]	@ (8000ff0 <STEPPERS_Init+0x260>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b62      	ldr	r3, [pc, #392]	@ (8000ff0 <STEPPERS_Init+0x260>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 8000e72:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e76:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8000e7a:	485b      	ldr	r0, [pc, #364]	@ (8000fe8 <STEPPERS_Init+0x258>)
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	1a9b      	subs	r3, r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	440b      	add	r3, r1
 8000e86:	3308      	adds	r3, #8
 8000e88:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000e8c:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8000e9a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e9e:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8000ea2:	4851      	ldr	r0, [pc, #324]	@ (8000fe8 <STEPPERS_Init+0x258>)
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	1a9b      	subs	r3, r3, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000eb0:	f107 0210 	add.w	r2, r7, #16
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 f820 	bl	8002efc <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8000ebc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000ec6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	f67f af7b 	bls.w	8000dc6 <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8000ed0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ed4:	4949      	ldr	r1, [pc, #292]	@ (8000ffc <STEPPERS_Init+0x26c>)
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	3311      	adds	r3, #17
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 8000ee6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000eea:	4944      	ldr	r1, [pc, #272]	@ (8000ffc <STEPPERS_Init+0x26c>)
 8000eec:	4613      	mov	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	330f      	adds	r3, #15
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8000efc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f00:	493e      	ldr	r1, [pc, #248]	@ (8000ffc <STEPPERS_Init+0x26c>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8000f10:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f14:	4939      	ldr	r1, [pc, #228]	@ (8000ffc <STEPPERS_Init+0x26c>)
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	440b      	add	r3, r1
 8000f20:	3304      	adds	r3, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8000f26:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f2a:	4934      	ldr	r1, [pc, #208]	@ (8000ffc <STEPPERS_Init+0x26c>)
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	3308      	adds	r3, #8
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8000f3c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f40:	492e      	ldr	r1, [pc, #184]	@ (8000ffc <STEPPERS_Init+0x26c>)
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	330e      	adds	r3, #14
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8000f52:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f56:	4924      	ldr	r1, [pc, #144]	@ (8000fe8 <STEPPERS_Init+0x258>)
 8000f58:	4613      	mov	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	1a9b      	subs	r3, r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	331b      	adds	r3, #27
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d00b      	beq.n	8000f82 <STEPPERS_Init+0x1f2>
 8000f6a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f6e:	491e      	ldr	r1, [pc, #120]	@ (8000fe8 <STEPPERS_Init+0x258>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	1a9b      	subs	r3, r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	331b      	adds	r3, #27
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10b      	bne.n	8000f9a <STEPPERS_Init+0x20a>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8000f82:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f86:	491d      	ldr	r1, [pc, #116]	@ (8000ffc <STEPPERS_Init+0x26c>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	3310      	adds	r3, #16
 8000f94:	2204      	movs	r2, #4
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e016      	b.n	8000fc8 <STEPPERS_Init+0x238>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8000f9a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f9e:	4912      	ldr	r1, [pc, #72]	@ (8000fe8 <STEPPERS_Init+0x258>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	1a9b      	subs	r3, r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	331b      	adds	r3, #27
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d10a      	bne.n	8000fc8 <STEPPERS_Init+0x238>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8000fb2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000fb6:	4911      	ldr	r1, [pc, #68]	@ (8000ffc <STEPPERS_Init+0x26c>)
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	3310      	adds	r3, #16
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 8000fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f43f aef1 	beq.w	8000dbe <STEPPERS_Init+0x2e>
    	}
    }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	@ 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	08005be8 	.word	0x08005be8
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	20000068 	.word	0x20000068

08001000 <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
    uint32_t ARR_Value = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24

	STEPPERS_Init();
 8001024:	f7ff feb4 	bl	8000d90 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 8001028:	f44f 7352 	mov.w	r3, #840	@ 0x348
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a17      	ldr	r2, [pc, #92]	@ (8001090 <STEPPERS_Init_TMR+0x90>)
 8001032:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2263      	movs	r2, #99	@ 0x63
 8001038:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	1e5a      	subs	r2, r3, #1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2280      	movs	r2, #128	@ 0x80
 8001052:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f002 fda1 	bl	8003b9c <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800105e:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f003 f906 	bl	8004278 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f003 fcbe 	bl	80049fc <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f002 fddb 	bl	8003c3c <HAL_TIM_Base_Start_IT>
    }
}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	@ 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40000400 	.word	0x40000400
 8001094:	00000000 	.word	0x00000000

08001098 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	460a      	mov	r2, r1
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	4613      	mov	r3, r2
 80010a6:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 80010ac:	79fa      	ldrb	r2, [r7, #7]
 80010ae:	4928      	ldr	r1, [pc, #160]	@ (8001150 <STEPPER_SetSpeed+0xb8>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	330c      	adds	r3, #12
 80010bc:	88ba      	ldrh	r2, [r7, #4]
 80010be:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 80010c0:	79fa      	ldrb	r2, [r7, #7]
 80010c2:	4924      	ldr	r1, [pc, #144]	@ (8001154 <STEPPER_SetSpeed+0xbc>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	331b      	adds	r3, #27
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d10b      	bne.n	80010ee <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 80010d6:	79fa      	ldrb	r2, [r7, #7]
 80010d8:	491e      	ldr	r1, [pc, #120]	@ (8001154 <STEPPER_SetSpeed+0xbc>)
 80010da:	4613      	mov	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	1a9b      	subs	r3, r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3318      	adds	r3, #24
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	e009      	b.n	8001102 <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	4918      	ldr	r1, [pc, #96]	@ (8001154 <STEPPER_SetSpeed+0xbc>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	1a9b      	subs	r3, r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	3318      	adds	r3, #24
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8001102:	88bb      	ldrh	r3, [r7, #4]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	fb02 f303 	mul.w	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f9a6 	bl	800045c <__aeabi_ui2d>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	a10c      	add	r1, pc, #48	@ (adr r1, 8001148 <STEPPER_SetSpeed+0xb0>)
 8001116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800111a:	f7ff fb43 	bl	80007a4 <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	79fc      	ldrb	r4, [r7, #7]
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fc4c 	bl	80009c4 <__aeabi_d2uiz>
 800112c:	4602      	mov	r2, r0
 800112e:	4908      	ldr	r1, [pc, #32]	@ (8001150 <STEPPER_SetSpeed+0xb8>)
 8001130:	4623      	mov	r3, r4
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4423      	add	r3, r4
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	3308      	adds	r3, #8
 800113c:	601a      	str	r2, [r3, #0]
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}
 8001146:	bf00      	nop
 8001148:	00000000 	.word	0x00000000
 800114c:	40ed4c00 	.word	0x40ed4c00
 8001150:	20000068 	.word	0x20000068
 8001154:	08005be8 	.word	0x08005be8

08001158 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8001162:	79fa      	ldrb	r2, [r7, #7]
 8001164:	4999      	ldr	r1, [pc, #612]	@ (80013cc <STEPPER_One_Step+0x274>)
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	331a      	adds	r3, #26
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f040 81c4 	bne.w	8001502 <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 800117a:	79fa      	ldrb	r2, [r7, #7]
 800117c:	4993      	ldr	r1, [pc, #588]	@ (80013cc <STEPPER_One_Step+0x274>)
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	331b      	adds	r3, #27
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	f040 8088 	bne.w	80012a2 <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8001192:	79fa      	ldrb	r2, [r7, #7]
 8001194:	498d      	ldr	r1, [pc, #564]	@ (80013cc <STEPPER_One_Step+0x274>)
 8001196:	4613      	mov	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	1a9b      	subs	r3, r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	79fa      	ldrb	r2, [r7, #7]
 80011a4:	4989      	ldr	r1, [pc, #548]	@ (80013cc <STEPPER_One_Step+0x274>)
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	1a9b      	subs	r3, r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	3310      	adds	r3, #16
 80011b2:	8819      	ldrh	r1, [r3, #0]
 80011b4:	79fa      	ldrb	r2, [r7, #7]
 80011b6:	4c86      	ldr	r4, [pc, #536]	@ (80013d0 <STEPPER_One_Step+0x278>)
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4423      	add	r3, r4
 80011c2:	330f      	adds	r3, #15
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b82      	ldr	r3, [pc, #520]	@ (80013d4 <STEPPER_One_Step+0x27c>)
 80011ca:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80011ce:	461a      	mov	r2, r3
 80011d0:	f002 f818 	bl	8003204 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	497d      	ldr	r1, [pc, #500]	@ (80013cc <STEPPER_One_Step+0x274>)
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	3304      	adds	r3, #4
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	79fa      	ldrb	r2, [r7, #7]
 80011e8:	4978      	ldr	r1, [pc, #480]	@ (80013cc <STEPPER_One_Step+0x274>)
 80011ea:	4613      	mov	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	1a9b      	subs	r3, r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	3312      	adds	r3, #18
 80011f6:	8819      	ldrh	r1, [r3, #0]
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	4c75      	ldr	r4, [pc, #468]	@ (80013d0 <STEPPER_One_Step+0x278>)
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4423      	add	r3, r4
 8001206:	330f      	adds	r3, #15
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4a72      	ldr	r2, [pc, #456]	@ (80013d4 <STEPPER_One_Step+0x27c>)
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	785b      	ldrb	r3, [r3, #1]
 8001212:	461a      	mov	r2, r3
 8001214:	f001 fff6 	bl	8003204 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8001218:	79fa      	ldrb	r2, [r7, #7]
 800121a:	496c      	ldr	r1, [pc, #432]	@ (80013cc <STEPPER_One_Step+0x274>)
 800121c:	4613      	mov	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	1a9b      	subs	r3, r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	3308      	adds	r3, #8
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	79fa      	ldrb	r2, [r7, #7]
 800122c:	4967      	ldr	r1, [pc, #412]	@ (80013cc <STEPPER_One_Step+0x274>)
 800122e:	4613      	mov	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	1a9b      	subs	r3, r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	3314      	adds	r3, #20
 800123a:	8819      	ldrh	r1, [r3, #0]
 800123c:	79fa      	ldrb	r2, [r7, #7]
 800123e:	4c64      	ldr	r4, [pc, #400]	@ (80013d0 <STEPPER_One_Step+0x278>)
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4423      	add	r3, r4
 800124a:	330f      	adds	r3, #15
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4a61      	ldr	r2, [pc, #388]	@ (80013d4 <STEPPER_One_Step+0x27c>)
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	789b      	ldrb	r3, [r3, #2]
 8001256:	461a      	mov	r2, r3
 8001258:	f001 ffd4 	bl	8003204 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	495b      	ldr	r1, [pc, #364]	@ (80013cc <STEPPER_One_Step+0x274>)
 8001260:	4613      	mov	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	1a9b      	subs	r3, r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	330c      	adds	r3, #12
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	79fa      	ldrb	r2, [r7, #7]
 8001270:	4956      	ldr	r1, [pc, #344]	@ (80013cc <STEPPER_One_Step+0x274>)
 8001272:	4613      	mov	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	1a9b      	subs	r3, r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	3316      	adds	r3, #22
 800127e:	8819      	ldrh	r1, [r3, #0]
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	4c53      	ldr	r4, [pc, #332]	@ (80013d0 <STEPPER_One_Step+0x278>)
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4423      	add	r3, r4
 800128e:	330f      	adds	r3, #15
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	4a50      	ldr	r2, [pc, #320]	@ (80013d4 <STEPPER_One_Step+0x27c>)
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	78db      	ldrb	r3, [r3, #3]
 800129a:	461a      	mov	r2, r3
 800129c:	f001 ffb2 	bl	8003204 <HAL_GPIO_WritePin>
 80012a0:	e12f      	b.n	8001502 <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 80012a2:	79fa      	ldrb	r2, [r7, #7]
 80012a4:	4949      	ldr	r1, [pc, #292]	@ (80013cc <STEPPER_One_Step+0x274>)
 80012a6:	4613      	mov	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	331b      	adds	r3, #27
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	f040 8091 	bne.w	80013dc <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80012ba:	79fa      	ldrb	r2, [r7, #7]
 80012bc:	4943      	ldr	r1, [pc, #268]	@ (80013cc <STEPPER_One_Step+0x274>)
 80012be:	4613      	mov	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	1a9b      	subs	r3, r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	440b      	add	r3, r1
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	493f      	ldr	r1, [pc, #252]	@ (80013cc <STEPPER_One_Step+0x274>)
 80012ce:	4613      	mov	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	1a9b      	subs	r3, r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	3310      	adds	r3, #16
 80012da:	8819      	ldrh	r1, [r3, #0]
 80012dc:	79fa      	ldrb	r2, [r7, #7]
 80012de:	4c3c      	ldr	r4, [pc, #240]	@ (80013d0 <STEPPER_One_Step+0x278>)
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4423      	add	r3, r4
 80012ea:	330f      	adds	r3, #15
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b39      	ldr	r3, [pc, #228]	@ (80013d8 <STEPPER_One_Step+0x280>)
 80012f2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80012f6:	461a      	mov	r2, r3
 80012f8:	f001 ff84 	bl	8003204 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80012fc:	79fa      	ldrb	r2, [r7, #7]
 80012fe:	4933      	ldr	r1, [pc, #204]	@ (80013cc <STEPPER_One_Step+0x274>)
 8001300:	4613      	mov	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	3304      	adds	r3, #4
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	492e      	ldr	r1, [pc, #184]	@ (80013cc <STEPPER_One_Step+0x274>)
 8001312:	4613      	mov	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	3312      	adds	r3, #18
 800131e:	8819      	ldrh	r1, [r3, #0]
 8001320:	79fa      	ldrb	r2, [r7, #7]
 8001322:	4c2b      	ldr	r4, [pc, #172]	@ (80013d0 <STEPPER_One_Step+0x278>)
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4423      	add	r3, r4
 800132e:	330f      	adds	r3, #15
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	4a29      	ldr	r2, [pc, #164]	@ (80013d8 <STEPPER_One_Step+0x280>)
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	785b      	ldrb	r3, [r3, #1]
 800133a:	461a      	mov	r2, r3
 800133c:	f001 ff62 	bl	8003204 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8001340:	79fa      	ldrb	r2, [r7, #7]
 8001342:	4922      	ldr	r1, [pc, #136]	@ (80013cc <STEPPER_One_Step+0x274>)
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	3308      	adds	r3, #8
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	79fa      	ldrb	r2, [r7, #7]
 8001354:	491d      	ldr	r1, [pc, #116]	@ (80013cc <STEPPER_One_Step+0x274>)
 8001356:	4613      	mov	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	3314      	adds	r3, #20
 8001362:	8819      	ldrh	r1, [r3, #0]
 8001364:	79fa      	ldrb	r2, [r7, #7]
 8001366:	4c1a      	ldr	r4, [pc, #104]	@ (80013d0 <STEPPER_One_Step+0x278>)
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4423      	add	r3, r4
 8001372:	330f      	adds	r3, #15
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4a18      	ldr	r2, [pc, #96]	@ (80013d8 <STEPPER_One_Step+0x280>)
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	789b      	ldrb	r3, [r3, #2]
 800137e:	461a      	mov	r2, r3
 8001380:	f001 ff40 	bl	8003204 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8001384:	79fa      	ldrb	r2, [r7, #7]
 8001386:	4911      	ldr	r1, [pc, #68]	@ (80013cc <STEPPER_One_Step+0x274>)
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	330c      	adds	r3, #12
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	79fa      	ldrb	r2, [r7, #7]
 8001398:	490c      	ldr	r1, [pc, #48]	@ (80013cc <STEPPER_One_Step+0x274>)
 800139a:	4613      	mov	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	3316      	adds	r3, #22
 80013a6:	8819      	ldrh	r1, [r3, #0]
 80013a8:	79fa      	ldrb	r2, [r7, #7]
 80013aa:	4c09      	ldr	r4, [pc, #36]	@ (80013d0 <STEPPER_One_Step+0x278>)
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4423      	add	r3, r4
 80013b6:	330f      	adds	r3, #15
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4a07      	ldr	r2, [pc, #28]	@ (80013d8 <STEPPER_One_Step+0x280>)
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	78db      	ldrb	r3, [r3, #3]
 80013c2:	461a      	mov	r2, r3
 80013c4:	f001 ff1e 	bl	8003204 <HAL_GPIO_WritePin>
 80013c8:	e09b      	b.n	8001502 <STEPPER_One_Step+0x3aa>
 80013ca:	bf00      	nop
 80013cc:	08005be8 	.word	0x08005be8
 80013d0:	20000068 	.word	0x20000068
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000010 	.word	0x20000010
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	4988      	ldr	r1, [pc, #544]	@ (8001600 <STEPPER_One_Step+0x4a8>)
 80013e0:	4613      	mov	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	331b      	adds	r3, #27
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	f040 8087 	bne.w	8001502 <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	4982      	ldr	r1, [pc, #520]	@ (8001600 <STEPPER_One_Step+0x4a8>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	79fa      	ldrb	r2, [r7, #7]
 8001406:	497e      	ldr	r1, [pc, #504]	@ (8001600 <STEPPER_One_Step+0x4a8>)
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3310      	adds	r3, #16
 8001414:	8819      	ldrh	r1, [r3, #0]
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	4c7a      	ldr	r4, [pc, #488]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4423      	add	r3, r4
 8001424:	330f      	adds	r3, #15
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b77      	ldr	r3, [pc, #476]	@ (8001608 <STEPPER_One_Step+0x4b0>)
 800142c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001430:	461a      	mov	r2, r3
 8001432:	f001 fee7 	bl	8003204 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8001436:	79fa      	ldrb	r2, [r7, #7]
 8001438:	4971      	ldr	r1, [pc, #452]	@ (8001600 <STEPPER_One_Step+0x4a8>)
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	3304      	adds	r3, #4
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	79fa      	ldrb	r2, [r7, #7]
 800144a:	496d      	ldr	r1, [pc, #436]	@ (8001600 <STEPPER_One_Step+0x4a8>)
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	3312      	adds	r3, #18
 8001458:	8819      	ldrh	r1, [r3, #0]
 800145a:	79fa      	ldrb	r2, [r7, #7]
 800145c:	4c69      	ldr	r4, [pc, #420]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4423      	add	r3, r4
 8001468:	330f      	adds	r3, #15
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4a66      	ldr	r2, [pc, #408]	@ (8001608 <STEPPER_One_Step+0x4b0>)
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	461a      	mov	r2, r3
 8001476:	f001 fec5 	bl	8003204 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	4960      	ldr	r1, [pc, #384]	@ (8001600 <STEPPER_One_Step+0x4a8>)
 800147e:	4613      	mov	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	1a9b      	subs	r3, r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	3308      	adds	r3, #8
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	495c      	ldr	r1, [pc, #368]	@ (8001600 <STEPPER_One_Step+0x4a8>)
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	3314      	adds	r3, #20
 800149c:	8819      	ldrh	r1, [r3, #0]
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	4c58      	ldr	r4, [pc, #352]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4423      	add	r3, r4
 80014ac:	330f      	adds	r3, #15
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4a55      	ldr	r2, [pc, #340]	@ (8001608 <STEPPER_One_Step+0x4b0>)
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	789b      	ldrb	r3, [r3, #2]
 80014b8:	461a      	mov	r2, r3
 80014ba:	f001 fea3 	bl	8003204 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80014be:	79fa      	ldrb	r2, [r7, #7]
 80014c0:	494f      	ldr	r1, [pc, #316]	@ (8001600 <STEPPER_One_Step+0x4a8>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	330c      	adds	r3, #12
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	79fa      	ldrb	r2, [r7, #7]
 80014d2:	494b      	ldr	r1, [pc, #300]	@ (8001600 <STEPPER_One_Step+0x4a8>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3316      	adds	r3, #22
 80014e0:	8819      	ldrh	r1, [r3, #0]
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	4c47      	ldr	r4, [pc, #284]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4423      	add	r3, r4
 80014f0:	330f      	adds	r3, #15
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4a44      	ldr	r2, [pc, #272]	@ (8001608 <STEPPER_One_Step+0x4b0>)
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	78db      	ldrb	r3, [r3, #3]
 80014fc:	461a      	mov	r2, r3
 80014fe:	f001 fe81 	bl	8003204 <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 8001502:	79fa      	ldrb	r2, [r7, #7]
 8001504:	493f      	ldr	r1, [pc, #252]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	3311      	adds	r3, #17
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d132      	bne.n	800157e <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8001518:	79fa      	ldrb	r2, [r7, #7]
 800151a:	493a      	ldr	r1, [pc, #232]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	330f      	adds	r3, #15
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d112      	bne.n	8001554 <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 800152e:	79f9      	ldrb	r1, [r7, #7]
 8001530:	79fa      	ldrb	r2, [r7, #7]
 8001532:	4834      	ldr	r0, [pc, #208]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 8001534:	460b      	mov	r3, r1
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4403      	add	r3, r0
 800153e:	3310      	adds	r3, #16
 8001540:	7818      	ldrb	r0, [r3, #0]
 8001542:	4930      	ldr	r1, [pc, #192]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	330f      	adds	r3, #15
 8001550:	4602      	mov	r2, r0
 8001552:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8001554:	79fa      	ldrb	r2, [r7, #7]
 8001556:	492b      	ldr	r1, [pc, #172]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	330f      	adds	r3, #15
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	3b01      	subs	r3, #1
 8001568:	b2d8      	uxtb	r0, r3
 800156a:	4926      	ldr	r1, [pc, #152]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	330f      	adds	r3, #15
 8001578:	4602      	mov	r2, r0
 800157a:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 800157c:	e03c      	b.n	80015f8 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	4920      	ldr	r1, [pc, #128]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	3311      	adds	r3, #17
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d131      	bne.n	80015f8 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	491b      	ldr	r1, [pc, #108]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	330f      	adds	r3, #15
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	3301      	adds	r3, #1
 80015a8:	b2d8      	uxtb	r0, r3
 80015aa:	4916      	ldr	r1, [pc, #88]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	330f      	adds	r3, #15
 80015b8:	4602      	mov	r2, r0
 80015ba:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	4911      	ldr	r1, [pc, #68]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	330f      	adds	r3, #15
 80015cc:	7819      	ldrb	r1, [r3, #0]
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	480c      	ldr	r0, [pc, #48]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4403      	add	r3, r0
 80015dc:	3310      	adds	r3, #16
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4299      	cmp	r1, r3
 80015e2:	d109      	bne.n	80015f8 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 80015e4:	79fa      	ldrb	r2, [r7, #7]
 80015e6:	4907      	ldr	r1, [pc, #28]	@ (8001604 <STEPPER_One_Step+0x4ac>)
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	330f      	adds	r3, #15
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd90      	pop	{r4, r7, pc}
 8001600:	08005be8 	.word	0x08005be8
 8001604:	20000068 	.word	0x20000068
 8001608:	20000020 	.word	0x20000020

0800160c <STEPPER_Step_NonBlocking>:
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
}

void STEPPER_Step_NonBlocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
 8001618:	4613      	mov	r3, r2
 800161a:	71bb      	strb	r3, [r7, #6]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps += au32_Steps;
 800161c:	79fa      	ldrb	r2, [r7, #7]
 800161e:	4910      	ldr	r1, [pc, #64]	@ (8001660 <STEPPER_Step_NonBlocking+0x54>)
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	79fa      	ldrb	r2, [r7, #7]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	4419      	add	r1, r3
 8001632:	480b      	ldr	r0, [pc, #44]	@ (8001660 <STEPPER_Step_NonBlocking+0x54>)
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4403      	add	r3, r0
 800163e:	6019      	str	r1, [r3, #0]
	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 8001640:	79fa      	ldrb	r2, [r7, #7]
 8001642:	4907      	ldr	r1, [pc, #28]	@ (8001660 <STEPPER_Step_NonBlocking+0x54>)
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	3311      	adds	r3, #17
 8001650:	79ba      	ldrb	r2, [r7, #6]
 8001652:	701a      	strb	r2, [r3, #0]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	20000068 	.word	0x20000068

08001664 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a34      	ldr	r2, [pc, #208]	@ (8001748 <STEPPER_TMR_OVF_ISR+0xe4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d162      	bne.n	8001740 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	e05c      	b.n	800173a <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	4932      	ldr	r1, [pc, #200]	@ (800174c <STEPPER_TMR_OVF_ISR+0xe8>)
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	3304      	adds	r3, #4
 8001690:	6819      	ldr	r1, [r3, #0]
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	482d      	ldr	r0, [pc, #180]	@ (800174c <STEPPER_TMR_OVF_ISR+0xe8>)
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4403      	add	r3, r0
 80016a0:	3308      	adds	r3, #8
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4299      	cmp	r1, r3
 80016a6:	d333      	bcc.n	8001710 <STEPPER_TMR_OVF_ISR+0xac>
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	4928      	ldr	r1, [pc, #160]	@ (800174c <STEPPER_TMR_OVF_ISR+0xe8>)
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	330e      	adds	r3, #14
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d028      	beq.n	8001710 <STEPPER_TMR_OVF_ISR+0xac>
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	4922      	ldr	r1, [pc, #136]	@ (800174c <STEPPER_TMR_OVF_ISR+0xe8>)
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d01e      	beq.n	8001710 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fd3f 	bl	8001158 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	491b      	ldr	r1, [pc, #108]	@ (800174c <STEPPER_TMR_OVF_ISR+0xe8>)
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1e59      	subs	r1, r3, #1
 80016ec:	4817      	ldr	r0, [pc, #92]	@ (800174c <STEPPER_TMR_OVF_ISR+0xe8>)
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4403      	add	r3, r0
 80016f8:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	4913      	ldr	r1, [pc, #76]	@ (800174c <STEPPER_TMR_OVF_ISR+0xe8>)
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	3304      	adds	r3, #4
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e011      	b.n	8001734 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	490e      	ldr	r1, [pc, #56]	@ (800174c <STEPPER_TMR_OVF_ISR+0xe8>)
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	3304      	adds	r3, #4
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	1c59      	adds	r1, r3, #1
 8001724:	4809      	ldr	r0, [pc, #36]	@ (800174c <STEPPER_TMR_OVF_ISR+0xe8>)
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4403      	add	r3, r0
 8001730:	3304      	adds	r3, #4
 8001732:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	3301      	adds	r3, #1
 8001738:	73fb      	strb	r3, [r7, #15]
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d09f      	beq.n	8001680 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40000400 	.word	0x40000400
 800174c:	20000068 	.word	0x20000068

08001750 <STEPPER_GET_STEP>:

// updated
void STEPPER_GET_STEP(uint8_t au8_STEPPER_Instance, uint16_t* returned_Steps)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
	*returned_Steps = (uint16_t)gs_STEPPER_info[au8_STEPPER_Instance].Steps;
 800175c:	79fa      	ldrb	r2, [r7, #7]
 800175e:	4908      	ldr	r1, [pc, #32]	@ (8001780 <STEPPER_GET_STEP+0x30>)
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b29a      	uxth	r2, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	801a      	strh	r2, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000068 	.word	0x20000068

08001784 <STEPPER_GET_DIR>:
{
	*returned_step_index = gs_STEPPER_info[au8_STEPPER_Instance].Step_Index;
}

void STEPPER_GET_DIR(uint8_t au8_STEPPER_Instance, uint8_t* returned_direction)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
	*returned_direction = gs_STEPPER_info[au8_STEPPER_Instance].Dir;
 8001790:	79fa      	ldrb	r2, [r7, #7]
 8001792:	4908      	ldr	r1, [pc, #32]	@ (80017b4 <STEPPER_GET_DIR+0x30>)
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	3311      	adds	r3, #17
 80017a0:	781a      	ldrb	r2, [r3, #0]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	701a      	strb	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000068 	.word	0x20000068

080017b8 <calculate_checksum>:
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART6_UART_Init(void);


void calculate_checksum(uint8_t *data){
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	data[6] = data[5]+data[4]+data[3]+data[2]+data[1];
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3305      	adds	r3, #5
 80017c4:	781a      	ldrb	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3304      	adds	r3, #4
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3303      	adds	r3, #3
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3302      	adds	r3, #2
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4413      	add	r3, r2
 80017e2:	b2d9      	uxtb	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3301      	adds	r3, #1
 80017e8:	781a      	ldrb	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3306      	adds	r3, #6
 80017ee:	440a      	add	r2, r1
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	701a      	strb	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <check_sum>:

uint8_t check_sum(uint8_t command_H, uint8_t command_L, uint8_t data_H, uint8_t data_L, uint8_t slave_adress){
 8001800:	b490      	push	{r4, r7}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4604      	mov	r4, r0
 8001808:	4608      	mov	r0, r1
 800180a:	4611      	mov	r1, r2
 800180c:	461a      	mov	r2, r3
 800180e:	4623      	mov	r3, r4
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	4603      	mov	r3, r0
 8001814:	71bb      	strb	r3, [r7, #6]
 8001816:	460b      	mov	r3, r1
 8001818:	717b      	strb	r3, [r7, #5]
 800181a:	4613      	mov	r3, r2
 800181c:	713b      	strb	r3, [r7, #4]
	return (command_H + command_L + data_H + data_L + slave_adress);
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	79bb      	ldrb	r3, [r7, #6]
 8001822:	4413      	add	r3, r2
 8001824:	b2da      	uxtb	r2, r3
 8001826:	797b      	ldrb	r3, [r7, #5]
 8001828:	4413      	add	r3, r2
 800182a:	b2da      	uxtb	r2, r3
 800182c:	793b      	ldrb	r3, [r7, #4]
 800182e:	4413      	add	r3, r2
 8001830:	b2da      	uxtb	r2, r3
 8001832:	7c3b      	ldrb	r3, [r7, #16]
 8001834:	4413      	add	r3, r2
 8001836:	b2db      	uxtb	r3, r3
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bc90      	pop	{r4, r7}
 8001840:	4770      	bx	lr
	...

08001844 <map>:

float map( uint8_t data_H, uint8_t data_L, uint16_t max_val, uint16_t min_val){
 8001844:	b490      	push	{r4, r7}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	4604      	mov	r4, r0
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4623      	mov	r3, r4
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	4603      	mov	r3, r0
 8001858:	71bb      	strb	r3, [r7, #6]
 800185a:	460b      	mov	r3, r1
 800185c:	80bb      	strh	r3, [r7, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	807b      	strh	r3, [r7, #2]
    uint16_t bit16_val = ((uint16_t)data_H << 8) | data_L;
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	b21b      	sxth	r3, r3
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b21a      	sxth	r2, r3
 800186a:	79bb      	ldrb	r3, [r7, #6]
 800186c:	b21b      	sxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	b21b      	sxth	r3, r3
 8001872:	81fb      	strh	r3, [r7, #14]
    return min_val + ( (float)(bit16_val) / 65535.0f ) * (max_val - min_val);
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800187e:	89fb      	ldrh	r3, [r7, #14]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001888:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80018b4 <map+0x70>
 800188c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001890:	88ba      	ldrh	r2, [r7, #4]
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc90      	pop	{r4, r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	477fff00 	.word	0x477fff00

080018b8 <generate_message>:

void generate_message(uint8_t* data ,uint8_t slave_adress, uint8_t command_H, uint8_t command_L, uint8_t data_H, uint8_t data_L){
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	4608      	mov	r0, r1
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	4603      	mov	r3, r0
 80018c8:	70fb      	strb	r3, [r7, #3]
 80018ca:	460b      	mov	r3, r1
 80018cc:	70bb      	strb	r3, [r7, #2]
 80018ce:	4613      	mov	r3, r2
 80018d0:	707b      	strb	r3, [r7, #1]
	data[0] = 0xFF,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	22ff      	movs	r2, #255	@ 0xff
 80018d6:	701a      	strb	r2, [r3, #0]
	data[1] = slave_adress;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3301      	adds	r3, #1
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	701a      	strb	r2, [r3, #0]
	data[2] = command_H;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3302      	adds	r3, #2
 80018e4:	78ba      	ldrb	r2, [r7, #2]
 80018e6:	701a      	strb	r2, [r3, #0]
	data[3] = command_L;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3303      	adds	r3, #3
 80018ec:	787a      	ldrb	r2, [r7, #1]
 80018ee:	701a      	strb	r2, [r3, #0]
	data[4] = data_H;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3304      	adds	r3, #4
 80018f4:	7c3a      	ldrb	r2, [r7, #16]
 80018f6:	701a      	strb	r2, [r3, #0]
	data[5] = data_L;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3305      	adds	r3, #5
 80018fc:	7d3a      	ldrb	r2, [r7, #20]
 80018fe:	701a      	strb	r2, [r3, #0]
	data[6] = 0x00;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3306      	adds	r3, #6
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <S_transmit_message>:

void S_transmit_message(uint8_t *data, uint8_t slave_adress, uint8_t command_H, uint8_t command_L, uint8_t data_H, uint8_t data_L, uint8_t size){
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af02      	add	r7, sp, #8
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4603      	mov	r3, r0
 8001924:	70fb      	strb	r3, [r7, #3]
 8001926:	460b      	mov	r3, r1
 8001928:	70bb      	strb	r3, [r7, #2]
 800192a:	4613      	mov	r3, r2
 800192c:	707b      	strb	r3, [r7, #1]
	generate_message(data, slave_adress, command_H, command_L, data_H, data_L);
 800192e:	7878      	ldrb	r0, [r7, #1]
 8001930:	78ba      	ldrb	r2, [r7, #2]
 8001932:	78f9      	ldrb	r1, [r7, #3]
 8001934:	7d3b      	ldrb	r3, [r7, #20]
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	7c3b      	ldrb	r3, [r7, #16]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	4603      	mov	r3, r0
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ffba 	bl	80018b8 <generate_message>
	calculate_checksum(data);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff37 	bl	80017b8 <calculate_checksum>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800194a:	2201      	movs	r2, #1
 800194c:	2104      	movs	r1, #4
 800194e:	4807      	ldr	r0, [pc, #28]	@ (800196c <S_transmit_message+0x58>)
 8001950:	f001 fc58 	bl	8003204 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(&huart6, data, size);
 8001954:	7e3b      	ldrb	r3, [r7, #24]
 8001956:	b29b      	uxth	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4804      	ldr	r0, [pc, #16]	@ (8001970 <S_transmit_message+0x5c>)
 800195e:	f003 f971 	bl	8004c44 <HAL_UART_Transmit_IT>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40020800 	.word	0x40020800
 8001970:	2000019c 	.word	0x2000019c

08001974 <S_Step_RPM_Response>:

void S_Step_RPM_Response(uint8_t *data, uint8_t slave_adress, uint8_t speed){ //speed is between 14-0
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af04      	add	r7, sp, #16
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
 8001980:	4613      	mov	r3, r2
 8001982:	70bb      	strb	r3, [r7, #2]

	uint16_t result = (uint16_t)(((float)speed / 14.0f) * 65535.0f + 0.5f);
 8001984:	78bb      	ldrb	r3, [r7, #2]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800198e:	eef2 6a0c 	vmov.f32	s13, #44	@ 0x41600000  14.0
 8001992:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001996:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80019e8 <S_Step_RPM_Response+0x74>
 800199a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80019a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019aa:	ee17 3a90 	vmov	r3, s15
 80019ae:	81fb      	strh	r3, [r7, #14]
	uint8_t data_H = (result >> 8) & 0xFF;
 80019b0:	89fb      	ldrh	r3, [r7, #14]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	737b      	strb	r3, [r7, #13]
	uint8_t data_L = result & 0xFF;
 80019b8:	89fb      	ldrh	r3, [r7, #14]
 80019ba:	733b      	strb	r3, [r7, #12]

	S_transmit_message(data, slave_adress, 0x00, 0x57, data_H, data_L,7);
 80019bc:	78f9      	ldrb	r1, [r7, #3]
 80019be:	2307      	movs	r3, #7
 80019c0:	9302      	str	r3, [sp, #8]
 80019c2:	7b3b      	ldrb	r3, [r7, #12]
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	7b7b      	ldrb	r3, [r7, #13]
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2357      	movs	r3, #87	@ 0x57
 80019cc:	2200      	movs	r2, #0
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffa0 	bl	8001914 <S_transmit_message>
	HAL_UARTEx_ReceiveToIdle_IT(&huart6, S_RxData, 1);
 80019d4:	2201      	movs	r2, #1
 80019d6:	4905      	ldr	r1, [pc, #20]	@ (80019ec <S_Step_RPM_Response+0x78>)
 80019d8:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <S_Step_RPM_Response+0x7c>)
 80019da:	f003 f969 	bl	8004cb0 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	477fff00 	.word	0x477fff00
 80019ec:	200001e4 	.word	0x200001e4
 80019f0:	2000019c 	.word	0x2000019c

080019f4 <S_Step_remaining_steps_Response>:

void S_Step_remaining_steps_Response(uint8_t *data, uint8_t slave_adress, uint16_t remaining_steps){ //speed is between
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af04      	add	r7, sp, #16
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
 8001a00:	4613      	mov	r3, r2
 8001a02:	803b      	strh	r3, [r7, #0]

	uint8_t data_H = (remaining_steps >> 8) & 0xFF;
 8001a04:	883b      	ldrh	r3, [r7, #0]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	73fb      	strb	r3, [r7, #15]
	uint8_t data_L = remaining_steps & 0xFF;
 8001a0c:	883b      	ldrh	r3, [r7, #0]
 8001a0e:	73bb      	strb	r3, [r7, #14]

	S_transmit_message(data, slave_adress, 0x00, 0x97, data_H, data_L,7);
 8001a10:	78f9      	ldrb	r1, [r7, #3]
 8001a12:	2307      	movs	r3, #7
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	7bbb      	ldrb	r3, [r7, #14]
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2397      	movs	r3, #151	@ 0x97
 8001a20:	2200      	movs	r2, #0
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ff76 	bl	8001914 <S_transmit_message>
	HAL_UARTEx_ReceiveToIdle_IT(&huart6, S_RxData, 1);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4904      	ldr	r1, [pc, #16]	@ (8001a3c <S_Step_remaining_steps_Response+0x48>)
 8001a2c:	4804      	ldr	r0, [pc, #16]	@ (8001a40 <S_Step_remaining_steps_Response+0x4c>)
 8001a2e:	f003 f93f 	bl	8004cb0 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200001e4 	.word	0x200001e4
 8001a40:	2000019c 	.word	0x2000019c

08001a44 <S_Step_direction_Response>:

void S_Step_direction_Response(uint8_t *data, uint8_t slave_adress, uint8_t Step_direction){ // DIR_CW = 0 or DIR_CCW = 1
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af04      	add	r7, sp, #16
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	70fb      	strb	r3, [r7, #3]
 8001a50:	4613      	mov	r3, r2
 8001a52:	70bb      	strb	r3, [r7, #2]
	S_transmit_message(data, slave_adress, 0x00, 0x77, 0x00, Step_direction,7);
 8001a54:	78f9      	ldrb	r1, [r7, #3]
 8001a56:	2307      	movs	r3, #7
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	78bb      	ldrb	r3, [r7, #2]
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2377      	movs	r3, #119	@ 0x77
 8001a64:	2200      	movs	r2, #0
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ff54 	bl	8001914 <S_transmit_message>
	HAL_UARTEx_ReceiveToIdle_IT(&huart6, S_RxData, 1);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4904      	ldr	r1, [pc, #16]	@ (8001a80 <S_Step_direction_Response+0x3c>)
 8001a70:	4804      	ldr	r0, [pc, #16]	@ (8001a84 <S_Step_direction_Response+0x40>)
 8001a72:	f003 f91d 	bl	8004cb0 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200001e4 	.word	0x200001e4
 8001a84:	2000019c 	.word	0x2000019c

08001a88 <S_Servo1_angle_Response>:

void S_Servo1_angle_Response(uint8_t *data, uint8_t slave_adress, uint8_t angle){ //angle < 360
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af04      	add	r7, sp, #16
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
 8001a94:	4613      	mov	r3, r2
 8001a96:	70bb      	strb	r3, [r7, #2]

	S_transmit_message(data, slave_adress, 0x00, 0x17, 0x00, angle,7);
 8001a98:	78f9      	ldrb	r1, [r7, #3]
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	78bb      	ldrb	r3, [r7, #2]
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2317      	movs	r3, #23
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ff32 	bl	8001914 <S_transmit_message>
	HAL_UARTEx_ReceiveToIdle_IT(&huart6, S_RxData, 1);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4904      	ldr	r1, [pc, #16]	@ (8001ac4 <S_Servo1_angle_Response+0x3c>)
 8001ab4:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <S_Servo1_angle_Response+0x40>)
 8001ab6:	f003 f8fb 	bl	8004cb0 <HAL_UARTEx_ReceiveToIdle_IT>

}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200001e4 	.word	0x200001e4
 8001ac8:	2000019c 	.word	0x2000019c

08001acc <S_Servo2_angle_Response>:

void S_Servo2_angle_Response(uint8_t *data, uint8_t slave_adress, uint8_t angle){ //angle < 360
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af04      	add	r7, sp, #16
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	70fb      	strb	r3, [r7, #3]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	70bb      	strb	r3, [r7, #2]

	S_transmit_message(data, slave_adress, 0x00, 0xB7, 0x00, angle,7);
 8001adc:	78f9      	ldrb	r1, [r7, #3]
 8001ade:	2307      	movs	r3, #7
 8001ae0:	9302      	str	r3, [sp, #8]
 8001ae2:	78bb      	ldrb	r3, [r7, #2]
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	23b7      	movs	r3, #183	@ 0xb7
 8001aec:	2200      	movs	r2, #0
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff10 	bl	8001914 <S_transmit_message>
	HAL_UARTEx_ReceiveToIdle_IT(&huart6, S_RxData, 1);
 8001af4:	2201      	movs	r2, #1
 8001af6:	4904      	ldr	r1, [pc, #16]	@ (8001b08 <S_Servo2_angle_Response+0x3c>)
 8001af8:	4804      	ldr	r0, [pc, #16]	@ (8001b0c <S_Servo2_angle_Response+0x40>)
 8001afa:	f003 f8d9 	bl	8004cb0 <HAL_UARTEx_ReceiveToIdle_IT>

}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200001e4 	.word	0x200001e4
 8001b0c:	2000019c 	.word	0x2000019c

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b14:	f000 ffb8 	bl	8002a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b18:	f000 f82c 	bl	8001b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1c:	f000 fa4a 	bl	8001fb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b20:	f000 f9f4 	bl	8001f0c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001b24:	f000 f890 	bl	8001c48 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001b28:	f000 f9a2 	bl	8001e70 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001b2c:	f000 fa18 	bl	8001f60 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8001b30:	f000 f928 	bl	8001d84 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  STEPPERS_Init_TMR(&htim3);
 8001b34:	480a      	ldr	r0, [pc, #40]	@ (8001b60 <main+0x50>)
 8001b36:	f7ff fa63 	bl	8001000 <STEPPERS_Init_TMR>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001b3a:	210c      	movs	r1, #12
 8001b3c:	4809      	ldr	r0, [pc, #36]	@ (8001b64 <main+0x54>)
 8001b3e:	f002 f939 	bl	8003db4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b42:	2100      	movs	r1, #0
 8001b44:	4808      	ldr	r0, [pc, #32]	@ (8001b68 <main+0x58>)
 8001b46:	f002 f935 	bl	8003db4 <HAL_TIM_PWM_Start>
  HAL_UARTEx_ReceiveToIdle_IT(&huart6, S_RxData, 1);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4907      	ldr	r1, [pc, #28]	@ (8001b6c <main+0x5c>)
 8001b4e:	4808      	ldr	r0, [pc, #32]	@ (8001b70 <main+0x60>)
 8001b50:	f003 f8ae 	bl	8004cb0 <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_Delay(2000);
 8001b54:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b58:	f001 f808 	bl	8002b6c <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <main+0x4c>
 8001b60:	2000010c 	.word	0x2000010c
 8001b64:	2000007c 	.word	0x2000007c
 8001b68:	200000c4 	.word	0x200000c4
 8001b6c:	200001e4 	.word	0x200001e4
 8001b70:	2000019c 	.word	0x2000019c

08001b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b094      	sub	sp, #80	@ 0x50
 8001b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7a:	f107 0320 	add.w	r3, r7, #32
 8001b7e:	2230      	movs	r2, #48	@ 0x30
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fff8 	bl	8005b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <SystemClock_Config+0xcc>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	4a27      	ldr	r2, [pc, #156]	@ (8001c40 <SystemClock_Config+0xcc>)
 8001ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba8:	4b25      	ldr	r3, [pc, #148]	@ (8001c40 <SystemClock_Config+0xcc>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <SystemClock_Config+0xd0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a21      	ldr	r2, [pc, #132]	@ (8001c44 <SystemClock_Config+0xd0>)
 8001bbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <SystemClock_Config+0xd0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd8:	2310      	movs	r3, #16
 8001bda:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001be0:	2300      	movs	r3, #0
 8001be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001be4:	2310      	movs	r3, #16
 8001be6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001be8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001bec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf6:	f107 0320 	add.w	r3, r7, #32
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f001 fb36 	bl	800326c <HAL_RCC_OscConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c06:	f000 fd5b 	bl	80026c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c0a:	230f      	movs	r3, #15
 8001c0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	2102      	movs	r1, #2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 fd98 	bl	800375c <HAL_RCC_ClockConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c32:	f000 fd45 	bl	80026c0 <Error_Handler>
  }
}
 8001c36:	bf00      	nop
 8001c38:	3750      	adds	r7, #80	@ 0x50
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40007000 	.word	0x40007000

08001c48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b096      	sub	sp, #88	@ 0x58
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	615a      	str	r2, [r3, #20]
 8001c78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 ff79 	bl	8005b78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c86:	4b3d      	ldr	r3, [pc, #244]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001c88:	4a3d      	ldr	r2, [pc, #244]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001c8e:	2253      	movs	r2, #83	@ 0x53
 8001c90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b3a      	ldr	r3, [pc, #232]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001c98:	4b38      	ldr	r3, [pc, #224]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001c9a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	4b36      	ldr	r3, [pc, #216]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ca6:	4b35      	ldr	r3, [pc, #212]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cac:	4b33      	ldr	r3, [pc, #204]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cb2:	4832      	ldr	r0, [pc, #200]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001cb4:	f001 ff72 	bl	8003b9c <HAL_TIM_Base_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001cbe:	f000 fcff 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cc8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ccc:	4619      	mov	r1, r3
 8001cce:	482b      	ldr	r0, [pc, #172]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001cd0:	f002 fad2 	bl	8004278 <HAL_TIM_ConfigClockSource>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001cda:	f000 fcf1 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cde:	4827      	ldr	r0, [pc, #156]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001ce0:	f002 f80e 	bl	8003d00 <HAL_TIM_PWM_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001cea:	f000 fce9 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	481f      	ldr	r0, [pc, #124]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001cfe:	f002 fe7d 	bl	80049fc <HAL_TIMEx_MasterConfigSynchronization>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d08:	f000 fcda 	bl	80026c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0c:	2360      	movs	r3, #96	@ 0x60
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d28:	220c      	movs	r2, #12
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4813      	ldr	r0, [pc, #76]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001d2e:	f002 f9e1 	bl	80040f4 <HAL_TIM_PWM_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001d38:	f000 fcc2 	bl	80026c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4807      	ldr	r0, [pc, #28]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001d60:	f002 feba 	bl	8004ad8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001d6a:	f000 fca9 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d6e:	4803      	ldr	r0, [pc, #12]	@ (8001d7c <MX_TIM1_Init+0x134>)
 8001d70:	f000 fd26 	bl	80027c0 <HAL_TIM_MspPostInit>

}
 8001d74:	bf00      	nop
 8001d76:	3758      	adds	r7, #88	@ 0x58
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	2000007c 	.word	0x2000007c
 8001d80:	40010000 	.word	0x40010000

08001d84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08e      	sub	sp, #56	@ 0x38
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d98:	f107 0320 	add.w	r3, r7, #32
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
 8001db0:	615a      	str	r2, [r3, #20]
 8001db2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001db4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e6c <MX_TIM2_Init+0xe8>)
 8001db6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <MX_TIM2_Init+0xe8>)
 8001dbe:	2253      	movs	r2, #83	@ 0x53
 8001dc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e6c <MX_TIM2_Init+0xe8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001dc8:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <MX_TIM2_Init+0xe8>)
 8001dca:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001dce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd0:	4b26      	ldr	r3, [pc, #152]	@ (8001e6c <MX_TIM2_Init+0xe8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd6:	4b25      	ldr	r3, [pc, #148]	@ (8001e6c <MX_TIM2_Init+0xe8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ddc:	4823      	ldr	r0, [pc, #140]	@ (8001e6c <MX_TIM2_Init+0xe8>)
 8001dde:	f001 fedd 	bl	8003b9c <HAL_TIM_Base_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001de8:	f000 fc6a 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001df2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001df6:	4619      	mov	r1, r3
 8001df8:	481c      	ldr	r0, [pc, #112]	@ (8001e6c <MX_TIM2_Init+0xe8>)
 8001dfa:	f002 fa3d 	bl	8004278 <HAL_TIM_ConfigClockSource>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e04:	f000 fc5c 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e08:	4818      	ldr	r0, [pc, #96]	@ (8001e6c <MX_TIM2_Init+0xe8>)
 8001e0a:	f001 ff79 	bl	8003d00 <HAL_TIM_PWM_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e14:	f000 fc54 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e20:	f107 0320 	add.w	r3, r7, #32
 8001e24:	4619      	mov	r1, r3
 8001e26:	4811      	ldr	r0, [pc, #68]	@ (8001e6c <MX_TIM2_Init+0xe8>)
 8001e28:	f002 fde8 	bl	80049fc <HAL_TIMEx_MasterConfigSynchronization>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e32:	f000 fc45 	bl	80026c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e36:	2360      	movs	r3, #96	@ 0x60
 8001e38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4807      	ldr	r0, [pc, #28]	@ (8001e6c <MX_TIM2_Init+0xe8>)
 8001e4e:	f002 f951 	bl	80040f4 <HAL_TIM_PWM_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e58:	f000 fc32 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e5c:	4803      	ldr	r0, [pc, #12]	@ (8001e6c <MX_TIM2_Init+0xe8>)
 8001e5e:	f000 fcaf 	bl	80027c0 <HAL_TIM_MspPostInit>

}
 8001e62:	bf00      	nop
 8001e64:	3738      	adds	r7, #56	@ 0x38
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200000c4 	.word	0x200000c4

08001e70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e84:	463b      	mov	r3, r7
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <MX_TIM3_Init+0x94>)
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f08 <MX_TIM3_Init+0x98>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <MX_TIM3_Init+0x94>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <MX_TIM3_Init+0x94>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <MX_TIM3_Init+0x94>)
 8001ea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ea4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <MX_TIM3_Init+0x94>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <MX_TIM3_Init+0x94>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001eb2:	4814      	ldr	r0, [pc, #80]	@ (8001f04 <MX_TIM3_Init+0x94>)
 8001eb4:	f001 fe72 	bl	8003b9c <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001ebe:	f000 fbff 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ec8:	f107 0308 	add.w	r3, r7, #8
 8001ecc:	4619      	mov	r1, r3
 8001ece:	480d      	ldr	r0, [pc, #52]	@ (8001f04 <MX_TIM3_Init+0x94>)
 8001ed0:	f002 f9d2 	bl	8004278 <HAL_TIM_ConfigClockSource>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001eda:	f000 fbf1 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4806      	ldr	r0, [pc, #24]	@ (8001f04 <MX_TIM3_Init+0x94>)
 8001eec:	f002 fd86 	bl	80049fc <HAL_TIMEx_MasterConfigSynchronization>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001ef6:	f000 fbe3 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000010c 	.word	0x2000010c
 8001f08:	40000400 	.word	0x40000400

08001f0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	@ (8001f5c <MX_USART2_UART_Init+0x50>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f32:	220c      	movs	r2, #12
 8001f34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f36:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	@ (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f44:	f002 fe2e 	bl	8004ba4 <HAL_UART_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f4e:	f000 fbb7 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000154 	.word	0x20000154
 8001f5c:	40004400 	.word	0x40004400

08001f60 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <MX_USART6_UART_Init+0x4c>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <MX_USART6_UART_Init+0x50>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <MX_USART6_UART_Init+0x4c>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_USART6_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <MX_USART6_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <MX_USART6_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <MX_USART6_UART_Init+0x4c>)
 8001f86:	220c      	movs	r2, #12
 8001f88:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <MX_USART6_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_USART6_UART_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_USART6_UART_Init+0x4c>)
 8001f98:	f002 fe04 	bl	8004ba4 <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001fa2:	f000 fb8d 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000019c 	.word	0x2000019c
 8001fb0:	40011400 	.word	0x40011400

08001fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	@ 0x28
 8001fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b41      	ldr	r3, [pc, #260]	@ (80020d4 <MX_GPIO_Init+0x120>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a40      	ldr	r2, [pc, #256]	@ (80020d4 <MX_GPIO_Init+0x120>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b3e      	ldr	r3, [pc, #248]	@ (80020d4 <MX_GPIO_Init+0x120>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b3a      	ldr	r3, [pc, #232]	@ (80020d4 <MX_GPIO_Init+0x120>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a39      	ldr	r2, [pc, #228]	@ (80020d4 <MX_GPIO_Init+0x120>)
 8001ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b37      	ldr	r3, [pc, #220]	@ (80020d4 <MX_GPIO_Init+0x120>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	4b33      	ldr	r3, [pc, #204]	@ (80020d4 <MX_GPIO_Init+0x120>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a32      	ldr	r2, [pc, #200]	@ (80020d4 <MX_GPIO_Init+0x120>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b30      	ldr	r3, [pc, #192]	@ (80020d4 <MX_GPIO_Init+0x120>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b2c      	ldr	r3, [pc, #176]	@ (80020d4 <MX_GPIO_Init+0x120>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a2b      	ldr	r2, [pc, #172]	@ (80020d4 <MX_GPIO_Init+0x120>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b29      	ldr	r3, [pc, #164]	@ (80020d4 <MX_GPIO_Init+0x120>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	2104      	movs	r1, #4
 800203e:	4826      	ldr	r0, [pc, #152]	@ (80020d8 <MX_GPIO_Init+0x124>)
 8002040:	f001 f8e0 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002044:	2200      	movs	r2, #0
 8002046:	2120      	movs	r1, #32
 8002048:	4824      	ldr	r0, [pc, #144]	@ (80020dc <MX_GPIO_Init+0x128>)
 800204a:	f001 f8db 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002054:	4822      	ldr	r0, [pc, #136]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 8002056:	f001 f8d5 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800205a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800205e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002060:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	4819      	ldr	r0, [pc, #100]	@ (80020d8 <MX_GPIO_Init+0x124>)
 8002072:	f000 ff43 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002076:	2304      	movs	r3, #4
 8002078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207a:	2301      	movs	r3, #1
 800207c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	4812      	ldr	r0, [pc, #72]	@ (80020d8 <MX_GPIO_Init+0x124>)
 800208e:	f000 ff35 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002092:	2320      	movs	r3, #32
 8002094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002096:	2301      	movs	r3, #1
 8002098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020a2:	f107 0314 	add.w	r3, r7, #20
 80020a6:	4619      	mov	r1, r3
 80020a8:	480c      	ldr	r0, [pc, #48]	@ (80020dc <MX_GPIO_Init+0x128>)
 80020aa:	f000 ff27 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020ae:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80020b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	4806      	ldr	r0, [pc, #24]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 80020c8:	f000 ff18 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	@ 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020800 	.word	0x40020800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	00000000 	.word	0x00000000

080020e8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	460b      	mov	r3, r1
 80020f2:	817b      	strh	r3, [r7, #10]
	if(huart->Instance == USART6){ //slave1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a81      	ldr	r2, [pc, #516]	@ (8002300 <HAL_UARTEx_RxEventCallback+0x218>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	f040 82ac 	bne.w	8002658 <HAL_UARTEx_RxEventCallback+0x570>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		if((S_is_start_byte == 0) & (S_RxData[0] == 0xFF) &(S_is_error == 0)){ // start byte arrived
 8002100:	4b80      	ldr	r3, [pc, #512]	@ (8002304 <HAL_UARTEx_RxEventCallback+0x21c>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b7e      	ldr	r3, [pc, #504]	@ (8002308 <HAL_UARTEx_RxEventCallback+0x220>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2bff      	cmp	r3, #255	@ 0xff
 8002114:	bf0c      	ite	eq
 8002116:	2301      	moveq	r3, #1
 8002118:	2300      	movne	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	4013      	ands	r3, r2
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	4b7a      	ldr	r3, [pc, #488]	@ (800230c <HAL_UARTEx_RxEventCallback+0x224>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <HAL_UARTEx_RxEventCallback+0x62>
			S_is_start_byte = 1;
 8002136:	4b73      	ldr	r3, [pc, #460]	@ (8002304 <HAL_UARTEx_RxEventCallback+0x21c>)
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
			S_counter++;;
 800213c:	4b74      	ldr	r3, [pc, #464]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	b2da      	uxtb	r2, r3
 8002144:	4b72      	ldr	r3, [pc, #456]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e281      	b.n	800264e <HAL_UARTEx_RxEventCallback+0x566>

		}
		else if((S_is_start_byte == 1) & (S_RxData[0] == 0x01) & (S_counter == 1) & (S_is_error == 0)){ // adress belongs to the slave
 800214a:	4b6e      	ldr	r3, [pc, #440]	@ (8002304 <HAL_UARTEx_RxEventCallback+0x21c>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	bf0c      	ite	eq
 8002152:	2301      	moveq	r3, #1
 8002154:	2300      	movne	r3, #0
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b6b      	ldr	r3, [pc, #428]	@ (8002308 <HAL_UARTEx_RxEventCallback+0x220>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4013      	ands	r3, r2
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	4b68      	ldr	r3, [pc, #416]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	4013      	ands	r3, r2
 800217c:	4a63      	ldr	r2, [pc, #396]	@ (800230c <HAL_UARTEx_RxEventCallback+0x224>)
 800217e:	7812      	ldrb	r2, [r2, #0]
 8002180:	2a00      	cmp	r2, #0
 8002182:	bf0c      	ite	eq
 8002184:	2201      	moveq	r2, #1
 8002186:	2200      	movne	r2, #0
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <HAL_UARTEx_RxEventCallback+0xbc>
			S_is_adress_me = 1;
 8002190:	4b60      	ldr	r3, [pc, #384]	@ (8002314 <HAL_UARTEx_RxEventCallback+0x22c>)
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
			S_counter++;
 8002196:	4b5e      	ldr	r3, [pc, #376]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	3301      	adds	r3, #1
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b5c      	ldr	r3, [pc, #368]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e254      	b.n	800264e <HAL_UARTEx_RxEventCallback+0x566>

		}
		else if((S_is_start_byte == 1) & (S_is_adress_me == 0) & (S_counter > 0) & (S_counter < 8) & (S_is_error == 0)){ // adress does not belong to the slave
 80021a4:	4b57      	ldr	r3, [pc, #348]	@ (8002304 <HAL_UARTEx_RxEventCallback+0x21c>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4b58      	ldr	r3, [pc, #352]	@ (8002314 <HAL_UARTEx_RxEventCallback+0x22c>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf0c      	ite	eq
 80021ba:	2301      	moveq	r3, #1
 80021bc:	2300      	movne	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	4013      	ands	r3, r2
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b52      	ldr	r3, [pc, #328]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4013      	ands	r3, r2
 80021d6:	4a4e      	ldr	r2, [pc, #312]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	2a07      	cmp	r2, #7
 80021dc:	bf94      	ite	ls
 80021de:	2201      	movls	r2, #1
 80021e0:	2200      	movhi	r2, #0
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	4013      	ands	r3, r2
 80021e6:	4a49      	ldr	r2, [pc, #292]	@ (800230c <HAL_UARTEx_RxEventCallback+0x224>)
 80021e8:	7812      	ldrb	r2, [r2, #0]
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	bf0c      	ite	eq
 80021ee:	2201      	moveq	r2, #1
 80021f0:	2200      	movne	r2, #0
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d017      	beq.n	800222a <HAL_UARTEx_RxEventCallback+0x142>

			if(S_counter == 6){ // end of the message
 80021fa:	4b45      	ldr	r3, [pc, #276]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b06      	cmp	r3, #6
 8002200:	d10c      	bne.n	800221c <HAL_UARTEx_RxEventCallback+0x134>
				S_is_error = 0;
 8002202:	4b42      	ldr	r3, [pc, #264]	@ (800230c <HAL_UARTEx_RxEventCallback+0x224>)
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
				S_counter = 0;
 8002208:	4b41      	ldr	r3, [pc, #260]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
				S_is_start_byte = 0;
 800220e:	4b3d      	ldr	r3, [pc, #244]	@ (8002304 <HAL_UARTEx_RxEventCallback+0x21c>)
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
				S_is_adress_me = 0;
 8002214:	4b3f      	ldr	r3, [pc, #252]	@ (8002314 <HAL_UARTEx_RxEventCallback+0x22c>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e218      	b.n	800264e <HAL_UARTEx_RxEventCallback+0x566>
			}
			else{
				S_counter++;
 800221c:	4b3c      	ldr	r3, [pc, #240]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	4b3a      	ldr	r3, [pc, #232]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	e211      	b.n	800264e <HAL_UARTEx_RxEventCallback+0x566>
			}
		}
		else if((S_is_start_byte == 1) & (S_is_adress_me == SLAVE_ADRESS1) & (S_is_error == 0) & (S_counter > 1) & (S_counter < 8)){ // take the message whose adress belongs to slave
 800222a:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <HAL_UARTEx_RxEventCallback+0x21c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	bf0c      	ite	eq
 8002232:	2301      	moveq	r3, #1
 8002234:	2300      	movne	r3, #0
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b36      	ldr	r3, [pc, #216]	@ (8002314 <HAL_UARTEx_RxEventCallback+0x22c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	4013      	ands	r3, r2
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	4b2f      	ldr	r3, [pc, #188]	@ (800230c <HAL_UARTEx_RxEventCallback+0x224>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	4013      	ands	r3, r2
 800225c:	4a2c      	ldr	r2, [pc, #176]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 800225e:	7812      	ldrb	r2, [r2, #0]
 8002260:	2a01      	cmp	r2, #1
 8002262:	bf8c      	ite	hi
 8002264:	2201      	movhi	r2, #1
 8002266:	2200      	movls	r2, #0
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	4013      	ands	r3, r2
 800226c:	4a28      	ldr	r2, [pc, #160]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	2a07      	cmp	r2, #7
 8002272:	bf94      	ite	ls
 8002274:	2201      	movls	r2, #1
 8002276:	2200      	movhi	r2, #0
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 81e3 	beq.w	8002648 <HAL_UARTEx_RxEventCallback+0x560>

			switch(S_counter){
 8002282:	4b23      	ldr	r3, [pc, #140]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	3b02      	subs	r3, #2
 8002288:	2b04      	cmp	r3, #4
 800228a:	f200 8191 	bhi.w	80025b0 <HAL_UARTEx_RxEventCallback+0x4c8>
 800228e:	a201      	add	r2, pc, #4	@ (adr r2, 8002294 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002294:	080022a9 	.word	0x080022a9
 8002298:	080022bf 	.word	0x080022bf
 800229c:	080022d5 	.word	0x080022d5
 80022a0:	080022eb 	.word	0x080022eb
 80022a4:	08002329 	.word	0x08002329
			case 2:
				S_command_H = S_RxData[0]; // take the high byte of command
 80022a8:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HAL_UARTEx_RxEventCallback+0x220>)
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002318 <HAL_UARTEx_RxEventCallback+0x230>)
 80022ae:	701a      	strb	r2, [r3, #0]
				S_counter++;
 80022b0:	4b17      	ldr	r3, [pc, #92]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 80022ba:	701a      	strb	r2, [r3, #0]
				break;
 80022bc:	e1c7      	b.n	800264e <HAL_UARTEx_RxEventCallback+0x566>

			case 3:
				S_command_L = S_RxData[0];// take the low byte of command
 80022be:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <HAL_UARTEx_RxEventCallback+0x220>)
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	4b16      	ldr	r3, [pc, #88]	@ (800231c <HAL_UARTEx_RxEventCallback+0x234>)
 80022c4:	701a      	strb	r2, [r3, #0]
				S_counter++;
 80022c6:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 80022d0:	701a      	strb	r2, [r3, #0]
				break;
 80022d2:	e1bc      	b.n	800264e <HAL_UARTEx_RxEventCallback+0x566>

			case 4:
				S_data_H = S_RxData[0]; // take the high byte of data
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <HAL_UARTEx_RxEventCallback+0x220>)
 80022d6:	781a      	ldrb	r2, [r3, #0]
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_UARTEx_RxEventCallback+0x238>)
 80022da:	701a      	strb	r2, [r3, #0]
				S_counter++;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 80022e6:	701a      	strb	r2, [r3, #0]
				break;
 80022e8:	e1b1      	b.n	800264e <HAL_UARTEx_RxEventCallback+0x566>

			case 5:
				S_data_L = S_RxData[0]; // take the low byte of data
 80022ea:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <HAL_UARTEx_RxEventCallback+0x220>)
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <HAL_UARTEx_RxEventCallback+0x23c>)
 80022f0:	701a      	strb	r2, [r3, #0]
				S_counter++;
 80022f2:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <HAL_UARTEx_RxEventCallback+0x228>)
 80022fc:	701a      	strb	r2, [r3, #0]
				break;
 80022fe:	e1a6      	b.n	800264e <HAL_UARTEx_RxEventCallback+0x566>
 8002300:	40011400 	.word	0x40011400
 8002304:	200001f4 	.word	0x200001f4
 8002308:	200001e4 	.word	0x200001e4
 800230c:	200001f6 	.word	0x200001f6
 8002310:	200001f3 	.word	0x200001f3
 8002314:	200001f5 	.word	0x200001f5
 8002318:	200001ef 	.word	0x200001ef
 800231c:	200001f0 	.word	0x200001f0
 8002320:	200001f1 	.word	0x200001f1
 8002324:	200001f2 	.word	0x200001f2

			case 6:// take the check sum
				val = S_command_L;
 8002328:	4baf      	ldr	r3, [pc, #700]	@ (80025e8 <HAL_UARTEx_RxEventCallback+0x500>)
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	4baf      	ldr	r3, [pc, #700]	@ (80025ec <HAL_UARTEx_RxEventCallback+0x504>)
 800232e:	701a      	strb	r2, [r3, #0]
				S_checksum = S_RxData[0];
 8002330:	4baf      	ldr	r3, [pc, #700]	@ (80025f0 <HAL_UARTEx_RxEventCallback+0x508>)
 8002332:	781a      	ldrb	r2, [r3, #0]
 8002334:	4baf      	ldr	r3, [pc, #700]	@ (80025f4 <HAL_UARTEx_RxEventCallback+0x50c>)
 8002336:	701a      	strb	r2, [r3, #0]
				if(check_sum(S_command_H,S_command_L,S_data_H,S_data_L, SLAVE_ADRESS1) == S_checksum){ //check
 8002338:	4baf      	ldr	r3, [pc, #700]	@ (80025f8 <HAL_UARTEx_RxEventCallback+0x510>)
 800233a:	7818      	ldrb	r0, [r3, #0]
 800233c:	4baa      	ldr	r3, [pc, #680]	@ (80025e8 <HAL_UARTEx_RxEventCallback+0x500>)
 800233e:	7819      	ldrb	r1, [r3, #0]
 8002340:	4bae      	ldr	r3, [pc, #696]	@ (80025fc <HAL_UARTEx_RxEventCallback+0x514>)
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	4bae      	ldr	r3, [pc, #696]	@ (8002600 <HAL_UARTEx_RxEventCallback+0x518>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2401      	movs	r4, #1
 800234a:	9400      	str	r4, [sp, #0]
 800234c:	f7ff fa58 	bl	8001800 <check_sum>
 8002350:	4603      	mov	r3, r0
 8002352:	461a      	mov	r2, r3
 8002354:	4ba7      	ldr	r3, [pc, #668]	@ (80025f4 <HAL_UARTEx_RxEventCallback+0x50c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 811a 	bne.w	8002592 <HAL_UARTEx_RxEventCallback+0x4aa>
					S_is_error = 0; //end of the message
 800235e:	4ba9      	ldr	r3, [pc, #676]	@ (8002604 <HAL_UARTEx_RxEventCallback+0x51c>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
					S_counter = 0;
 8002364:	4ba8      	ldr	r3, [pc, #672]	@ (8002608 <HAL_UARTEx_RxEventCallback+0x520>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
					S_is_start_byte = 0;
 800236a:	4ba8      	ldr	r3, [pc, #672]	@ (800260c <HAL_UARTEx_RxEventCallback+0x524>)
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
					S_is_adress_me = 0;
 8002370:	4ba7      	ldr	r3, [pc, #668]	@ (8002610 <HAL_UARTEx_RxEventCallback+0x528>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
					//execute the command
					//send ack for now
					switch(S_command_L){
 8002376:	4b9c      	ldr	r3, [pc, #624]	@ (80025e8 <HAL_UARTEx_RxEventCallback+0x500>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2bbf      	cmp	r3, #191	@ 0xbf
 800237c:	f000 80fe 	beq.w	800257c <HAL_UARTEx_RxEventCallback+0x494>
 8002380:	2bbf      	cmp	r3, #191	@ 0xbf
 8002382:	f300 8113 	bgt.w	80025ac <HAL_UARTEx_RxEventCallback+0x4c4>
 8002386:	2bbc      	cmp	r3, #188	@ 0xbc
 8002388:	f000 80c4 	beq.w	8002514 <HAL_UARTEx_RxEventCallback+0x42c>
 800238c:	2bbc      	cmp	r3, #188	@ 0xbc
 800238e:	f300 810d 	bgt.w	80025ac <HAL_UARTEx_RxEventCallback+0x4c4>
 8002392:	2b9f      	cmp	r3, #159	@ 0x9f
 8002394:	f000 809a 	beq.w	80024cc <HAL_UARTEx_RxEventCallback+0x3e4>
 8002398:	2b9f      	cmp	r3, #159	@ 0x9f
 800239a:	f300 8107 	bgt.w	80025ac <HAL_UARTEx_RxEventCallback+0x4c4>
 800239e:	2b9c      	cmp	r3, #156	@ 0x9c
 80023a0:	d07d      	beq.n	800249e <HAL_UARTEx_RxEventCallback+0x3b6>
 80023a2:	2b9c      	cmp	r3, #156	@ 0x9c
 80023a4:	f300 8102 	bgt.w	80025ac <HAL_UARTEx_RxEventCallback+0x4c4>
 80023a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80023aa:	f000 80a7 	beq.w	80024fc <HAL_UARTEx_RxEventCallback+0x414>
 80023ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80023b0:	f300 80fc 	bgt.w	80025ac <HAL_UARTEx_RxEventCallback+0x4c4>
 80023b4:	2b7c      	cmp	r3, #124	@ 0x7c
 80023b6:	f000 8095 	beq.w	80024e4 <HAL_UARTEx_RxEventCallback+0x3fc>
 80023ba:	2b7c      	cmp	r3, #124	@ 0x7c
 80023bc:	f300 80f6 	bgt.w	80025ac <HAL_UARTEx_RxEventCallback+0x4c4>
 80023c0:	2b5f      	cmp	r3, #95	@ 0x5f
 80023c2:	d064      	beq.n	800248e <HAL_UARTEx_RxEventCallback+0x3a6>
 80023c4:	2b5f      	cmp	r3, #95	@ 0x5f
 80023c6:	f300 80f1 	bgt.w	80025ac <HAL_UARTEx_RxEventCallback+0x4c4>
 80023ca:	2b5c      	cmp	r3, #92	@ 0x5c
 80023cc:	d046      	beq.n	800245c <HAL_UARTEx_RxEventCallback+0x374>
 80023ce:	2b5c      	cmp	r3, #92	@ 0x5c
 80023d0:	f300 80ec 	bgt.w	80025ac <HAL_UARTEx_RxEventCallback+0x4c4>
 80023d4:	2b1c      	cmp	r3, #28
 80023d6:	d002      	beq.n	80023de <HAL_UARTEx_RxEventCallback+0x2f6>
 80023d8:	2b1f      	cmp	r3, #31
 80023da:	d037      	beq.n	800244c <HAL_UARTEx_RxEventCallback+0x364>
						//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
						break;

					default:

						break;
 80023dc:	e0e6      	b.n	80025ac <HAL_UARTEx_RxEventCallback+0x4c4>
						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80023de:	2120      	movs	r1, #32
 80023e0:	488c      	ldr	r0, [pc, #560]	@ (8002614 <HAL_UARTEx_RxEventCallback+0x52c>)
 80023e2:	f000 ff28 	bl	8003236 <HAL_GPIO_TogglePin>
						S_Servo1_angle = S_data_L;
 80023e6:	4b86      	ldr	r3, [pc, #536]	@ (8002600 <HAL_UARTEx_RxEventCallback+0x518>)
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002618 <HAL_UARTEx_RxEventCallback+0x530>)
 80023ec:	701a      	strb	r2, [r3, #0]
						S_Servo1_angle_value = (int)(350 + 2000*(S_Servo1_angle/180.0));
 80023ee:	4b8a      	ldr	r3, [pc, #552]	@ (8002618 <HAL_UARTEx_RxEventCallback+0x530>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f842 	bl	800047c <__aeabi_i2d>
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b87      	ldr	r3, [pc, #540]	@ (800261c <HAL_UARTEx_RxEventCallback+0x534>)
 80023fe:	f7fe f9d1 	bl	80007a4 <__aeabi_ddiv>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	4b84      	ldr	r3, [pc, #528]	@ (8002620 <HAL_UARTEx_RxEventCallback+0x538>)
 8002410:	f7fe f89e 	bl	8000550 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	a36e      	add	r3, pc, #440	@ (adr r3, 80025d8 <HAL_UARTEx_RxEventCallback+0x4f0>)
 800241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002422:	f7fd fedf 	bl	80001e4 <__adddf3>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4610      	mov	r0, r2
 800242c:	4619      	mov	r1, r3
 800242e:	f7fe faa1 	bl	8000974 <__aeabi_d2iz>
 8002432:	4603      	mov	r3, r0
 8002434:	b29a      	uxth	r2, r3
 8002436:	4b7b      	ldr	r3, [pc, #492]	@ (8002624 <HAL_UARTEx_RxEventCallback+0x53c>)
 8002438:	801a      	strh	r2, [r3, #0]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, S_Servo1_angle_value);
 800243a:	4b7a      	ldr	r3, [pc, #488]	@ (8002624 <HAL_UARTEx_RxEventCallback+0x53c>)
 800243c:	881a      	ldrh	r2, [r3, #0]
 800243e:	4b7a      	ldr	r3, [pc, #488]	@ (8002628 <HAL_UARTEx_RxEventCallback+0x540>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	641a      	str	r2, [r3, #64]	@ 0x40
						HAL_Delay(20);
 8002444:	2014      	movs	r0, #20
 8002446:	f000 fb91 	bl	8002b6c <HAL_Delay>
						break;
 800244a:	e0b0      	b.n	80025ae <HAL_UARTEx_RxEventCallback+0x4c6>
						S_Servo1_angle_Response(S_TxData, SLAVE_ADRESS1, S_Servo1_angle);
 800244c:	4b72      	ldr	r3, [pc, #456]	@ (8002618 <HAL_UARTEx_RxEventCallback+0x530>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	2101      	movs	r1, #1
 8002454:	4875      	ldr	r0, [pc, #468]	@ (800262c <HAL_UARTEx_RxEventCallback+0x544>)
 8002456:	f7ff fb17 	bl	8001a88 <S_Servo1_angle_Response>
						break;
 800245a:	e0a8      	b.n	80025ae <HAL_UARTEx_RxEventCallback+0x4c6>
						S_step_rpm_speed = map(S_data_H, S_data_L, 14, 0);
 800245c:	4b67      	ldr	r3, [pc, #412]	@ (80025fc <HAL_UARTEx_RxEventCallback+0x514>)
 800245e:	7818      	ldrb	r0, [r3, #0]
 8002460:	4b67      	ldr	r3, [pc, #412]	@ (8002600 <HAL_UARTEx_RxEventCallback+0x518>)
 8002462:	7819      	ldrb	r1, [r3, #0]
 8002464:	2300      	movs	r3, #0
 8002466:	220e      	movs	r2, #14
 8002468:	f7ff f9ec 	bl	8001844 <map>
 800246c:	eef0 7a40 	vmov.f32	s15, s0
 8002470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002474:	edc7 7a01 	vstr	s15, [r7, #4]
 8002478:	793b      	ldrb	r3, [r7, #4]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b6c      	ldr	r3, [pc, #432]	@ (8002630 <HAL_UARTEx_RxEventCallback+0x548>)
 800247e:	701a      	strb	r2, [r3, #0]
						STEPPER_SetSpeed(STEPPER_MOTOR1, S_step_rpm_speed);
 8002480:	4b6b      	ldr	r3, [pc, #428]	@ (8002630 <HAL_UARTEx_RxEventCallback+0x548>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	2000      	movs	r0, #0
 8002488:	f7fe fe06 	bl	8001098 <STEPPER_SetSpeed>
						break;
 800248c:	e08f      	b.n	80025ae <HAL_UARTEx_RxEventCallback+0x4c6>
						S_Step_RPM_Response(S_TxData, SLAVE_ADRESS1, S_step_rpm_speed);
 800248e:	4b68      	ldr	r3, [pc, #416]	@ (8002630 <HAL_UARTEx_RxEventCallback+0x548>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	2101      	movs	r1, #1
 8002496:	4865      	ldr	r0, [pc, #404]	@ (800262c <HAL_UARTEx_RxEventCallback+0x544>)
 8002498:	f7ff fa6c 	bl	8001974 <S_Step_RPM_Response>
						break;
 800249c:	e087      	b.n	80025ae <HAL_UARTEx_RxEventCallback+0x4c6>
						S_step_remaining_steps = ((uint16_t)S_data_H << 8) | S_data_L;
 800249e:	4b57      	ldr	r3, [pc, #348]	@ (80025fc <HAL_UARTEx_RxEventCallback+0x514>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b21b      	sxth	r3, r3
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	b21a      	sxth	r2, r3
 80024a8:	4b55      	ldr	r3, [pc, #340]	@ (8002600 <HAL_UARTEx_RxEventCallback+0x518>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	4b5f      	ldr	r3, [pc, #380]	@ (8002634 <HAL_UARTEx_RxEventCallback+0x54c>)
 80024b6:	801a      	strh	r2, [r3, #0]
						STEPPER_Step_NonBlocking(STEPPER_MOTOR1, S_step_remaining_steps, S_Step_direction);
 80024b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002634 <HAL_UARTEx_RxEventCallback+0x54c>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	4b5e      	ldr	r3, [pc, #376]	@ (8002638 <HAL_UARTEx_RxEventCallback+0x550>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7ff f8a1 	bl	800160c <STEPPER_Step_NonBlocking>
						break;
 80024ca:	e070      	b.n	80025ae <HAL_UARTEx_RxEventCallback+0x4c6>
						STEPPER_GET_STEP(STEPPER_MOTOR1, & S_step_remaining_steps);
 80024cc:	4959      	ldr	r1, [pc, #356]	@ (8002634 <HAL_UARTEx_RxEventCallback+0x54c>)
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7ff f93e 	bl	8001750 <STEPPER_GET_STEP>
						S_Step_remaining_steps_Response(S_TxData, SLAVE_ADRESS1, S_step_remaining_steps);
 80024d4:	4b57      	ldr	r3, [pc, #348]	@ (8002634 <HAL_UARTEx_RxEventCallback+0x54c>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	2101      	movs	r1, #1
 80024dc:	4853      	ldr	r0, [pc, #332]	@ (800262c <HAL_UARTEx_RxEventCallback+0x544>)
 80024de:	f7ff fa89 	bl	80019f4 <S_Step_remaining_steps_Response>
						break;
 80024e2:	e064      	b.n	80025ae <HAL_UARTEx_RxEventCallback+0x4c6>
						S_Step_direction = S_data_L;
 80024e4:	4b46      	ldr	r3, [pc, #280]	@ (8002600 <HAL_UARTEx_RxEventCallback+0x518>)
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	4b53      	ldr	r3, [pc, #332]	@ (8002638 <HAL_UARTEx_RxEventCallback+0x550>)
 80024ea:	701a      	strb	r2, [r3, #0]
						STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 0, S_Step_direction);
 80024ec:	4b52      	ldr	r3, [pc, #328]	@ (8002638 <HAL_UARTEx_RxEventCallback+0x550>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	2100      	movs	r1, #0
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7ff f889 	bl	800160c <STEPPER_Step_NonBlocking>
						break;
 80024fa:	e058      	b.n	80025ae <HAL_UARTEx_RxEventCallback+0x4c6>
						STEPPER_GET_DIR(STEPPER_MOTOR1, &S_Step_direction);
 80024fc:	494e      	ldr	r1, [pc, #312]	@ (8002638 <HAL_UARTEx_RxEventCallback+0x550>)
 80024fe:	2000      	movs	r0, #0
 8002500:	f7ff f940 	bl	8001784 <STEPPER_GET_DIR>
						S_Step_direction_Response(S_TxData, SLAVE_ADRESS1, S_Step_direction);
 8002504:	4b4c      	ldr	r3, [pc, #304]	@ (8002638 <HAL_UARTEx_RxEventCallback+0x550>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	2101      	movs	r1, #1
 800250c:	4847      	ldr	r0, [pc, #284]	@ (800262c <HAL_UARTEx_RxEventCallback+0x544>)
 800250e:	f7ff fa99 	bl	8001a44 <S_Step_direction_Response>
						break;
 8002512:	e04c      	b.n	80025ae <HAL_UARTEx_RxEventCallback+0x4c6>
						S_Servo2_angle = S_data_L;
 8002514:	4b3a      	ldr	r3, [pc, #232]	@ (8002600 <HAL_UARTEx_RxEventCallback+0x518>)
 8002516:	781a      	ldrb	r2, [r3, #0]
 8002518:	4b48      	ldr	r3, [pc, #288]	@ (800263c <HAL_UARTEx_RxEventCallback+0x554>)
 800251a:	701a      	strb	r2, [r3, #0]
						S_Servo2_angle_value = (int)(300 + 2000*(S_Servo2_angle/180.0));
 800251c:	4b47      	ldr	r3, [pc, #284]	@ (800263c <HAL_UARTEx_RxEventCallback+0x554>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fd ffab 	bl	800047c <__aeabi_i2d>
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	4b3c      	ldr	r3, [pc, #240]	@ (800261c <HAL_UARTEx_RxEventCallback+0x534>)
 800252c:	f7fe f93a 	bl	80007a4 <__aeabi_ddiv>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	4b38      	ldr	r3, [pc, #224]	@ (8002620 <HAL_UARTEx_RxEventCallback+0x538>)
 800253e:	f7fe f807 	bl	8000550 <__aeabi_dmul>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	a325      	add	r3, pc, #148	@ (adr r3, 80025e0 <HAL_UARTEx_RxEventCallback+0x4f8>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f7fd fe48 	bl	80001e4 <__adddf3>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f7fe fa0a 	bl	8000974 <__aeabi_d2iz>
 8002560:	4603      	mov	r3, r0
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b36      	ldr	r3, [pc, #216]	@ (8002640 <HAL_UARTEx_RxEventCallback+0x558>)
 8002566:	801a      	strh	r2, [r3, #0]
						__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (int)S_Servo2_angle_value);
 8002568:	4b35      	ldr	r3, [pc, #212]	@ (8002640 <HAL_UARTEx_RxEventCallback+0x558>)
 800256a:	881a      	ldrh	r2, [r3, #0]
 800256c:	4b35      	ldr	r3, [pc, #212]	@ (8002644 <HAL_UARTEx_RxEventCallback+0x55c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	635a      	str	r2, [r3, #52]	@ 0x34
						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002572:	2120      	movs	r1, #32
 8002574:	4827      	ldr	r0, [pc, #156]	@ (8002614 <HAL_UARTEx_RxEventCallback+0x52c>)
 8002576:	f000 fe5e 	bl	8003236 <HAL_GPIO_TogglePin>
						break;
 800257a:	e018      	b.n	80025ae <HAL_UARTEx_RxEventCallback+0x4c6>
						S_Servo2_angle_Response(S_TxData, SLAVE_ADRESS1, S_Servo2_angle);
 800257c:	4b2f      	ldr	r3, [pc, #188]	@ (800263c <HAL_UARTEx_RxEventCallback+0x554>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	2101      	movs	r1, #1
 8002584:	4829      	ldr	r0, [pc, #164]	@ (800262c <HAL_UARTEx_RxEventCallback+0x544>)
 8002586:	f7ff faa1 	bl	8001acc <S_Servo2_angle_Response>
						HAL_Delay(20);
 800258a:	2014      	movs	r0, #20
 800258c:	f000 faee 	bl	8002b6c <HAL_Delay>
						break;
 8002590:	e00d      	b.n	80025ae <HAL_UARTEx_RxEventCallback+0x4c6>

					//S_transmit_message(S_TxData, 0x01,0x00,0x4F,0xAA,0xCC,7);
				}
				else{ //error in transmission

					S_is_error = 1; //end of the message
 8002592:	4b1c      	ldr	r3, [pc, #112]	@ (8002604 <HAL_UARTEx_RxEventCallback+0x51c>)
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
					S_counter = 0;
 8002598:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_UARTEx_RxEventCallback+0x520>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
					S_is_start_byte = 0;
 800259e:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <HAL_UARTEx_RxEventCallback+0x524>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
					S_is_adress_me = 0;
 80025a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002610 <HAL_UARTEx_RxEventCallback+0x528>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
				}

				break;
 80025aa:	e050      	b.n	800264e <HAL_UARTEx_RxEventCallback+0x566>
						break;
 80025ac:	bf00      	nop
				break;
 80025ae:	e04e      	b.n	800264e <HAL_UARTEx_RxEventCallback+0x566>

			default:// error in the message
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80025b0:	2120      	movs	r1, #32
 80025b2:	4818      	ldr	r0, [pc, #96]	@ (8002614 <HAL_UARTEx_RxEventCallback+0x52c>)
 80025b4:	f000 fe3f 	bl	8003236 <HAL_GPIO_TogglePin>
				S_is_error = 1;
 80025b8:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <HAL_UARTEx_RxEventCallback+0x51c>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
				S_counter = 0;
 80025be:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <HAL_UARTEx_RxEventCallback+0x520>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
				S_is_start_byte = 0;
 80025c4:	4b11      	ldr	r3, [pc, #68]	@ (800260c <HAL_UARTEx_RxEventCallback+0x524>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
				S_is_adress_me = 0;
 80025ca:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <HAL_UARTEx_RxEventCallback+0x528>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
				break;
 80025d0:	e03d      	b.n	800264e <HAL_UARTEx_RxEventCallback+0x566>
 80025d2:	bf00      	nop
 80025d4:	f3af 8000 	nop.w
 80025d8:	00000000 	.word	0x00000000
 80025dc:	4075e000 	.word	0x4075e000
 80025e0:	00000000 	.word	0x00000000
 80025e4:	4072c000 	.word	0x4072c000
 80025e8:	200001f0 	.word	0x200001f0
 80025ec:	20000204 	.word	0x20000204
 80025f0:	200001e4 	.word	0x200001e4
 80025f4:	200001f7 	.word	0x200001f7
 80025f8:	200001ef 	.word	0x200001ef
 80025fc:	200001f1 	.word	0x200001f1
 8002600:	200001f2 	.word	0x200001f2
 8002604:	200001f6 	.word	0x200001f6
 8002608:	200001f3 	.word	0x200001f3
 800260c:	200001f4 	.word	0x200001f4
 8002610:	200001f5 	.word	0x200001f5
 8002614:	40020000 	.word	0x40020000
 8002618:	200001fd 	.word	0x200001fd
 800261c:	40668000 	.word	0x40668000
 8002620:	409f4000 	.word	0x409f4000
 8002624:	200001fe 	.word	0x200001fe
 8002628:	2000007c 	.word	0x2000007c
 800262c:	200001e8 	.word	0x200001e8
 8002630:	200001f8 	.word	0x200001f8
 8002634:	200001fa 	.word	0x200001fa
 8002638:	200001fc 	.word	0x200001fc
 800263c:	20000200 	.word	0x20000200
 8002640:	20000202 	.word	0x20000202
 8002644:	200000c4 	.word	0x200000c4
			}
		}
		else{

			// error in the message
			S_is_error = 1;
 8002648:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <HAL_UARTEx_RxEventCallback+0x578>)
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
			S_counter = 0;

		}
		*/
		}
		HAL_UARTEx_ReceiveToIdle_IT(&huart6, S_RxData, 1);
 800264e:	2201      	movs	r2, #1
 8002650:	4904      	ldr	r1, [pc, #16]	@ (8002664 <HAL_UARTEx_RxEventCallback+0x57c>)
 8002652:	4805      	ldr	r0, [pc, #20]	@ (8002668 <HAL_UARTEx_RxEventCallback+0x580>)
 8002654:	f002 fb2c 	bl	8004cb0 <HAL_UARTEx_ReceiveToIdle_IT>

	}
//	memset (RxData, '\0',64);
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bd90      	pop	{r4, r7, pc}
 8002660:	200001f6 	.word	0x200001f6
 8002664:	200001e4 	.word	0x200001e4
 8002668:	2000019c 	.word	0x2000019c

0800266c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART6) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a05      	ldr	r2, [pc, #20]	@ (8002690 <HAL_UART_TxCpltCallback+0x24>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d104      	bne.n	8002688 <HAL_UART_TxCpltCallback+0x1c>

    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800267e:	2200      	movs	r2, #0
 8002680:	2104      	movs	r1, #4
 8002682:	4804      	ldr	r0, [pc, #16]	@ (8002694 <HAL_UART_TxCpltCallback+0x28>)
 8002684:	f000 fdbe 	bl	8003204 <HAL_GPIO_WritePin>

        // Send completed
    }
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40011400 	.word	0x40011400
 8002694:	40020800 	.word	0x40020800

08002698 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a04      	ldr	r2, [pc, #16]	@ (80026b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d102      	bne.n	80026b0 <HAL_TIM_PeriodElapsedCallback+0x18>
		STEPPER_TMR_OVF_ISR(&htim3);
 80026aa:	4804      	ldr	r0, [pc, #16]	@ (80026bc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80026ac:	f7fe ffda 	bl	8001664 <STEPPER_TMR_OVF_ISR>
	}
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40000400 	.word	0x40000400
 80026bc:	2000010c 	.word	0x2000010c

080026c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c4:	b672      	cpsid	i
}
 80026c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c8:	bf00      	nop
 80026ca:	e7fd      	b.n	80026c8 <Error_Handler+0x8>

080026cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	4b10      	ldr	r3, [pc, #64]	@ (8002718 <HAL_MspInit+0x4c>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026da:	4a0f      	ldr	r2, [pc, #60]	@ (8002718 <HAL_MspInit+0x4c>)
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002718 <HAL_MspInit+0x4c>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <HAL_MspInit+0x4c>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	4a08      	ldr	r2, [pc, #32]	@ (8002718 <HAL_MspInit+0x4c>)
 80026f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <HAL_MspInit+0x4c>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800270a:	2007      	movs	r0, #7
 800270c:	f000 fb22 	bl	8002d54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800

0800271c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a22      	ldr	r2, [pc, #136]	@ (80027b4 <HAL_TIM_Base_MspInit+0x98>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10e      	bne.n	800274c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	4b21      	ldr	r3, [pc, #132]	@ (80027b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	4a20      	ldr	r2, [pc, #128]	@ (80027b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6453      	str	r3, [r2, #68]	@ 0x44
 800273e:	4b1e      	ldr	r3, [pc, #120]	@ (80027b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800274a:	e02e      	b.n	80027aa <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b17      	ldr	r3, [pc, #92]	@ (80027b8 <HAL_TIM_Base_MspInit+0x9c>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	4a16      	ldr	r2, [pc, #88]	@ (80027b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6413      	str	r3, [r2, #64]	@ 0x40
 8002766:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
}
 8002772:	e01a      	b.n	80027aa <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a10      	ldr	r2, [pc, #64]	@ (80027bc <HAL_TIM_Base_MspInit+0xa0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d115      	bne.n	80027aa <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b0d      	ldr	r3, [pc, #52]	@ (80027b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	4a0c      	ldr	r2, [pc, #48]	@ (80027b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	6413      	str	r3, [r2, #64]	@ 0x40
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	201d      	movs	r0, #29
 80027a0:	f000 fae3 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027a4:	201d      	movs	r0, #29
 80027a6:	f000 fafc 	bl	8002da2 <HAL_NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40000400 	.word	0x40000400

080027c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	@ 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a24      	ldr	r2, [pc, #144]	@ (8002870 <HAL_TIM_MspPostInit+0xb0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d11f      	bne.n	8002822 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	4b23      	ldr	r3, [pc, #140]	@ (8002874 <HAL_TIM_MspPostInit+0xb4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	4a22      	ldr	r2, [pc, #136]	@ (8002874 <HAL_TIM_MspPostInit+0xb4>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f2:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <HAL_TIM_MspPostInit+0xb4>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002810:	2301      	movs	r3, #1
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4619      	mov	r1, r3
 800281a:	4817      	ldr	r0, [pc, #92]	@ (8002878 <HAL_TIM_MspPostInit+0xb8>)
 800281c:	f000 fb6e 	bl	8002efc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002820:	e022      	b.n	8002868 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800282a:	d11d      	bne.n	8002868 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <HAL_TIM_MspPostInit+0xb4>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002834:	4a0f      	ldr	r2, [pc, #60]	@ (8002874 <HAL_TIM_MspPostInit+0xb4>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6313      	str	r3, [r2, #48]	@ 0x30
 800283c:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <HAL_TIM_MspPostInit+0xb4>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002848:	2301      	movs	r3, #1
 800284a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002858:	2301      	movs	r3, #1
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4619      	mov	r1, r3
 8002862:	4805      	ldr	r0, [pc, #20]	@ (8002878 <HAL_TIM_MspPostInit+0xb8>)
 8002864:	f000 fb4a 	bl	8002efc <HAL_GPIO_Init>
}
 8002868:	bf00      	nop
 800286a:	3728      	adds	r7, #40	@ 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40010000 	.word	0x40010000
 8002874:	40023800 	.word	0x40023800
 8002878:	40020000 	.word	0x40020000

0800287c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	@ 0x30
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a36      	ldr	r2, [pc, #216]	@ (8002974 <HAL_UART_MspInit+0xf8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d12c      	bne.n	80028f8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	4b35      	ldr	r3, [pc, #212]	@ (8002978 <HAL_UART_MspInit+0xfc>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	4a34      	ldr	r2, [pc, #208]	@ (8002978 <HAL_UART_MspInit+0xfc>)
 80028a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ae:	4b32      	ldr	r3, [pc, #200]	@ (8002978 <HAL_UART_MspInit+0xfc>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	61bb      	str	r3, [r7, #24]
 80028b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	4b2e      	ldr	r3, [pc, #184]	@ (8002978 <HAL_UART_MspInit+0xfc>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002978 <HAL_UART_MspInit+0xfc>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002978 <HAL_UART_MspInit+0xfc>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028d6:	230c      	movs	r3, #12
 80028d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028e6:	2307      	movs	r3, #7
 80028e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ea:	f107 031c 	add.w	r3, r7, #28
 80028ee:	4619      	mov	r1, r3
 80028f0:	4822      	ldr	r0, [pc, #136]	@ (800297c <HAL_UART_MspInit+0x100>)
 80028f2:	f000 fb03 	bl	8002efc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80028f6:	e038      	b.n	800296a <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a20      	ldr	r2, [pc, #128]	@ (8002980 <HAL_UART_MspInit+0x104>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d133      	bne.n	800296a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	4b1c      	ldr	r3, [pc, #112]	@ (8002978 <HAL_UART_MspInit+0xfc>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	4a1b      	ldr	r2, [pc, #108]	@ (8002978 <HAL_UART_MspInit+0xfc>)
 800290c:	f043 0320 	orr.w	r3, r3, #32
 8002910:	6453      	str	r3, [r2, #68]	@ 0x44
 8002912:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <HAL_UART_MspInit+0xfc>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <HAL_UART_MspInit+0xfc>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a14      	ldr	r2, [pc, #80]	@ (8002978 <HAL_UART_MspInit+0xfc>)
 8002928:	f043 0304 	orr.w	r3, r3, #4
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4b12      	ldr	r3, [pc, #72]	@ (8002978 <HAL_UART_MspInit+0xfc>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800293a:	23c0      	movs	r3, #192	@ 0xc0
 800293c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293e:	2302      	movs	r3, #2
 8002940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002946:	2303      	movs	r3, #3
 8002948:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800294a:	2308      	movs	r3, #8
 800294c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	4619      	mov	r1, r3
 8002954:	480b      	ldr	r0, [pc, #44]	@ (8002984 <HAL_UART_MspInit+0x108>)
 8002956:	f000 fad1 	bl	8002efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800295a:	2200      	movs	r2, #0
 800295c:	2100      	movs	r1, #0
 800295e:	2047      	movs	r0, #71	@ 0x47
 8002960:	f000 fa03 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002964:	2047      	movs	r0, #71	@ 0x47
 8002966:	f000 fa1c 	bl	8002da2 <HAL_NVIC_EnableIRQ>
}
 800296a:	bf00      	nop
 800296c:	3730      	adds	r7, #48	@ 0x30
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40004400 	.word	0x40004400
 8002978:	40023800 	.word	0x40023800
 800297c:	40020000 	.word	0x40020000
 8002980:	40011400 	.word	0x40011400
 8002984:	40020800 	.word	0x40020800

08002988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <NMI_Handler+0x4>

08002990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <HardFault_Handler+0x4>

08002998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <MemManage_Handler+0x4>

080029a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a4:	bf00      	nop
 80029a6:	e7fd      	b.n	80029a4 <BusFault_Handler+0x4>

080029a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <UsageFault_Handler+0x4>

080029b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029de:	f000 f8a5 	bl	8002b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029ec:	4802      	ldr	r0, [pc, #8]	@ (80029f8 <TIM3_IRQHandler+0x10>)
 80029ee:	f001 fa91 	bl	8003f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	2000010c 	.word	0x2000010c

080029fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002a00:	4802      	ldr	r0, [pc, #8]	@ (8002a0c <USART6_IRQHandler+0x10>)
 8002a02:	f002 f9b3 	bl	8004d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	2000019c 	.word	0x2000019c

08002a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <SystemInit+0x20>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1a:	4a05      	ldr	r2, [pc, #20]	@ (8002a30 <SystemInit+0x20>)
 8002a1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a38:	f7ff ffea 	bl	8002a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a3c:	480c      	ldr	r0, [pc, #48]	@ (8002a70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a3e:	490d      	ldr	r1, [pc, #52]	@ (8002a74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a40:	4a0d      	ldr	r2, [pc, #52]	@ (8002a78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a44:	e002      	b.n	8002a4c <LoopCopyDataInit>

08002a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a4a:	3304      	adds	r3, #4

08002a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a50:	d3f9      	bcc.n	8002a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a52:	4a0a      	ldr	r2, [pc, #40]	@ (8002a7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a54:	4c0a      	ldr	r4, [pc, #40]	@ (8002a80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a58:	e001      	b.n	8002a5e <LoopFillZerobss>

08002a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a5c:	3204      	adds	r2, #4

08002a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a60:	d3fb      	bcc.n	8002a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a62:	f003 f891 	bl	8005b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a66:	f7ff f853 	bl	8001b10 <main>
  bx  lr    
 8002a6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a74:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8002a78:	08005c2c 	.word	0x08005c2c
  ldr r2, =_sbss
 8002a7c:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8002a80:	2000020c 	.word	0x2000020c

08002a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a84:	e7fe      	b.n	8002a84 <ADC_IRQHandler>
	...

08002a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac8 <HAL_Init+0x40>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac8 <HAL_Init+0x40>)
 8002a92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <HAL_Init+0x40>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac8 <HAL_Init+0x40>)
 8002a9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa4:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <HAL_Init+0x40>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a07      	ldr	r2, [pc, #28]	@ (8002ac8 <HAL_Init+0x40>)
 8002aaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	f000 f94f 	bl	8002d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f000 f808 	bl	8002acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002abc:	f7ff fe06 	bl	80026cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023c00 	.word	0x40023c00

08002acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad4:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <HAL_InitTick+0x54>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <HAL_InitTick+0x58>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f967 	bl	8002dbe <HAL_SYSTICK_Config>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00e      	b.n	8002b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b0f      	cmp	r3, #15
 8002afe:	d80a      	bhi.n	8002b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b00:	2200      	movs	r2, #0
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	f000 f92f 	bl	8002d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b0c:	4a06      	ldr	r2, [pc, #24]	@ (8002b28 <HAL_InitTick+0x5c>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e000      	b.n	8002b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000040 	.word	0x20000040
 8002b24:	20000048 	.word	0x20000048
 8002b28:	20000044 	.word	0x20000044

08002b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b30:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_IncTick+0x20>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_IncTick+0x24>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	4a04      	ldr	r2, [pc, #16]	@ (8002b50 <HAL_IncTick+0x24>)
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000048 	.word	0x20000048
 8002b50:	20000208 	.word	0x20000208

08002b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return uwTick;
 8002b58:	4b03      	ldr	r3, [pc, #12]	@ (8002b68 <HAL_GetTick+0x14>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000208 	.word	0x20000208

08002b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b74:	f7ff ffee 	bl	8002b54 <HAL_GetTick>
 8002b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d005      	beq.n	8002b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b86:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <HAL_Delay+0x44>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4413      	add	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b92:	bf00      	nop
 8002b94:	f7ff ffde 	bl	8002b54 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d8f7      	bhi.n	8002b94 <HAL_Delay+0x28>
  {
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000048 	.word	0x20000048

08002bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be6:	4a04      	ldr	r2, [pc, #16]	@ (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	60d3      	str	r3, [r2, #12]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c00:	4b04      	ldr	r3, [pc, #16]	@ (8002c14 <__NVIC_GetPriorityGrouping+0x18>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	f003 0307 	and.w	r3, r3, #7
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	db0b      	blt.n	8002c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	f003 021f 	and.w	r2, r3, #31
 8002c30:	4907      	ldr	r1, [pc, #28]	@ (8002c50 <__NVIC_EnableIRQ+0x38>)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2001      	movs	r0, #1
 8002c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000e100 	.word	0xe000e100

08002c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	6039      	str	r1, [r7, #0]
 8002c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	db0a      	blt.n	8002c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	490c      	ldr	r1, [pc, #48]	@ (8002ca0 <__NVIC_SetPriority+0x4c>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	440b      	add	r3, r1
 8002c78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c7c:	e00a      	b.n	8002c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	4908      	ldr	r1, [pc, #32]	@ (8002ca4 <__NVIC_SetPriority+0x50>)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	3b04      	subs	r3, #4
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	440b      	add	r3, r1
 8002c92:	761a      	strb	r2, [r3, #24]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	@ 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f1c3 0307 	rsb	r3, r3, #7
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	bf28      	it	cs
 8002cc6:	2304      	movcs	r3, #4
 8002cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d902      	bls.n	8002cd8 <NVIC_EncodePriority+0x30>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3b03      	subs	r3, #3
 8002cd6:	e000      	b.n	8002cda <NVIC_EncodePriority+0x32>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	401a      	ands	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	43d9      	mvns	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	4313      	orrs	r3, r2
         );
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3724      	adds	r7, #36	@ 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d20:	d301      	bcc.n	8002d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00f      	b.n	8002d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d26:	4a0a      	ldr	r2, [pc, #40]	@ (8002d50 <SysTick_Config+0x40>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2e:	210f      	movs	r1, #15
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	f7ff ff8e 	bl	8002c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <SysTick_Config+0x40>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3e:	4b04      	ldr	r3, [pc, #16]	@ (8002d50 <SysTick_Config+0x40>)
 8002d40:	2207      	movs	r2, #7
 8002d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	e000e010 	.word	0xe000e010

08002d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ff29 	bl	8002bb4 <__NVIC_SetPriorityGrouping>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d7c:	f7ff ff3e 	bl	8002bfc <__NVIC_GetPriorityGrouping>
 8002d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	6978      	ldr	r0, [r7, #20]
 8002d88:	f7ff ff8e 	bl	8002ca8 <NVIC_EncodePriority>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff5d 	bl	8002c54 <__NVIC_SetPriority>
}
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff31 	bl	8002c18 <__NVIC_EnableIRQ>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ffa2 	bl	8002d10 <SysTick_Config>
 8002dcc:	4603      	mov	r3, r0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7ff feb6 	bl	8002b54 <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d008      	beq.n	8002e08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2280      	movs	r2, #128	@ 0x80
 8002dfa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e052      	b.n	8002eae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0216 	bic.w	r2, r2, #22
 8002e16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <HAL_DMA_Abort+0x62>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0208 	bic.w	r2, r2, #8
 8002e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e58:	e013      	b.n	8002e82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e5a:	f7ff fe7b 	bl	8002b54 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d90c      	bls.n	8002e82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e015      	b.n	8002eae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e4      	bne.n	8002e5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	223f      	movs	r2, #63	@ 0x3f
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2280      	movs	r2, #128	@ 0x80
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e00c      	b.n	8002eee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2205      	movs	r2, #5
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	@ 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e159      	b.n	80031cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f18:	2201      	movs	r2, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f040 8148 	bne.w	80031c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d005      	beq.n	8002f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d130      	bne.n	8002fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f84:	2201      	movs	r2, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 0201 	and.w	r2, r3, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d017      	beq.n	8002fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d123      	bne.n	8003040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	69b9      	ldr	r1, [r7, #24]
 800303c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0203 	and.w	r2, r3, #3
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80a2 	beq.w	80031c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b57      	ldr	r3, [pc, #348]	@ (80031e4 <HAL_GPIO_Init+0x2e8>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	4a56      	ldr	r2, [pc, #344]	@ (80031e4 <HAL_GPIO_Init+0x2e8>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003090:	6453      	str	r3, [r2, #68]	@ 0x44
 8003092:	4b54      	ldr	r3, [pc, #336]	@ (80031e4 <HAL_GPIO_Init+0x2e8>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800309e:	4a52      	ldr	r2, [pc, #328]	@ (80031e8 <HAL_GPIO_Init+0x2ec>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a49      	ldr	r2, [pc, #292]	@ (80031ec <HAL_GPIO_Init+0x2f0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d019      	beq.n	80030fe <HAL_GPIO_Init+0x202>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a48      	ldr	r2, [pc, #288]	@ (80031f0 <HAL_GPIO_Init+0x2f4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_GPIO_Init+0x1fe>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a47      	ldr	r2, [pc, #284]	@ (80031f4 <HAL_GPIO_Init+0x2f8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00d      	beq.n	80030f6 <HAL_GPIO_Init+0x1fa>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a46      	ldr	r2, [pc, #280]	@ (80031f8 <HAL_GPIO_Init+0x2fc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <HAL_GPIO_Init+0x1f6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a45      	ldr	r2, [pc, #276]	@ (80031fc <HAL_GPIO_Init+0x300>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d101      	bne.n	80030ee <HAL_GPIO_Init+0x1f2>
 80030ea:	2304      	movs	r3, #4
 80030ec:	e008      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030ee:	2307      	movs	r3, #7
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030f2:	2303      	movs	r3, #3
 80030f4:	e004      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030fe:	2300      	movs	r3, #0
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f002 0203 	and.w	r2, r2, #3
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	4093      	lsls	r3, r2
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003110:	4935      	ldr	r1, [pc, #212]	@ (80031e8 <HAL_GPIO_Init+0x2ec>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800311e:	4b38      	ldr	r3, [pc, #224]	@ (8003200 <HAL_GPIO_Init+0x304>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003142:	4a2f      	ldr	r2, [pc, #188]	@ (8003200 <HAL_GPIO_Init+0x304>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003148:	4b2d      	ldr	r3, [pc, #180]	@ (8003200 <HAL_GPIO_Init+0x304>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800316c:	4a24      	ldr	r2, [pc, #144]	@ (8003200 <HAL_GPIO_Init+0x304>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003172:	4b23      	ldr	r3, [pc, #140]	@ (8003200 <HAL_GPIO_Init+0x304>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003196:	4a1a      	ldr	r2, [pc, #104]	@ (8003200 <HAL_GPIO_Init+0x304>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800319c:	4b18      	ldr	r3, [pc, #96]	@ (8003200 <HAL_GPIO_Init+0x304>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003200 <HAL_GPIO_Init+0x304>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3301      	adds	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	f67f aea2 	bls.w	8002f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40013800 	.word	0x40013800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020400 	.word	0x40020400
 80031f4:	40020800 	.word	0x40020800
 80031f8:	40020c00 	.word	0x40020c00
 80031fc:	40021000 	.word	0x40021000
 8003200:	40013c00 	.word	0x40013c00

08003204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
 8003210:	4613      	mov	r3, r2
 8003212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003214:	787b      	ldrb	r3, [r7, #1]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003220:	e003      	b.n	800322a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003222:	887b      	ldrh	r3, [r7, #2]
 8003224:	041a      	lsls	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	619a      	str	r2, [r3, #24]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003236:	b480      	push	{r7}
 8003238:	b085      	sub	sp, #20
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	460b      	mov	r3, r1
 8003240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003248:	887a      	ldrh	r2, [r7, #2]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4013      	ands	r3, r2
 800324e:	041a      	lsls	r2, r3, #16
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	43d9      	mvns	r1, r3
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	400b      	ands	r3, r1
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	619a      	str	r2, [r3, #24]
}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e267      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d075      	beq.n	8003376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800328a:	4b88      	ldr	r3, [pc, #544]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b04      	cmp	r3, #4
 8003294:	d00c      	beq.n	80032b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003296:	4b85      	ldr	r3, [pc, #532]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d112      	bne.n	80032c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032a2:	4b82      	ldr	r3, [pc, #520]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ae:	d10b      	bne.n	80032c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	4b7e      	ldr	r3, [pc, #504]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d05b      	beq.n	8003374 <HAL_RCC_OscConfig+0x108>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d157      	bne.n	8003374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e242      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d0:	d106      	bne.n	80032e0 <HAL_RCC_OscConfig+0x74>
 80032d2:	4b76      	ldr	r3, [pc, #472]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a75      	ldr	r2, [pc, #468]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e01d      	b.n	800331c <HAL_RCC_OscConfig+0xb0>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x98>
 80032ea:	4b70      	ldr	r3, [pc, #448]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a6f      	ldr	r2, [pc, #444]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	4b6d      	ldr	r3, [pc, #436]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a6c      	ldr	r2, [pc, #432]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e00b      	b.n	800331c <HAL_RCC_OscConfig+0xb0>
 8003304:	4b69      	ldr	r3, [pc, #420]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a68      	ldr	r2, [pc, #416]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 800330a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	4b66      	ldr	r3, [pc, #408]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a65      	ldr	r2, [pc, #404]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800331a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d013      	beq.n	800334c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7ff fc16 	bl	8002b54 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800332c:	f7ff fc12 	bl	8002b54 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	@ 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e207      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	4b5b      	ldr	r3, [pc, #364]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0xc0>
 800334a:	e014      	b.n	8003376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7ff fc02 	bl	8002b54 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003354:	f7ff fbfe 	bl	8002b54 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	@ 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e1f3      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	4b51      	ldr	r3, [pc, #324]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0xe8>
 8003372:	e000      	b.n	8003376 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d063      	beq.n	800344a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003382:	4b4a      	ldr	r3, [pc, #296]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338e:	4b47      	ldr	r3, [pc, #284]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003396:	2b08      	cmp	r3, #8
 8003398:	d11c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800339a:	4b44      	ldr	r3, [pc, #272]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d116      	bne.n	80033d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a6:	4b41      	ldr	r3, [pc, #260]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <HAL_RCC_OscConfig+0x152>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d001      	beq.n	80033be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e1c7      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033be:	4b3b      	ldr	r3, [pc, #236]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4937      	ldr	r1, [pc, #220]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d2:	e03a      	b.n	800344a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d020      	beq.n	800341e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033dc:	4b34      	ldr	r3, [pc, #208]	@ (80034b0 <HAL_RCC_OscConfig+0x244>)
 80033de:	2201      	movs	r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7ff fbb7 	bl	8002b54 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ea:	f7ff fbb3 	bl	8002b54 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e1a8      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fc:	4b2b      	ldr	r3, [pc, #172]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003408:	4b28      	ldr	r3, [pc, #160]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4925      	ldr	r1, [pc, #148]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]
 800341c:	e015      	b.n	800344a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341e:	4b24      	ldr	r3, [pc, #144]	@ (80034b0 <HAL_RCC_OscConfig+0x244>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7ff fb96 	bl	8002b54 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342c:	f7ff fb92 	bl	8002b54 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e187      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343e:	4b1b      	ldr	r3, [pc, #108]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d036      	beq.n	80034c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d016      	beq.n	800348c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345e:	4b15      	ldr	r3, [pc, #84]	@ (80034b4 <HAL_RCC_OscConfig+0x248>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7ff fb76 	bl	8002b54 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346c:	f7ff fb72 	bl	8002b54 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e167      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347e:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0x200>
 800348a:	e01b      	b.n	80034c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348c:	4b09      	ldr	r3, [pc, #36]	@ (80034b4 <HAL_RCC_OscConfig+0x248>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003492:	f7ff fb5f 	bl	8002b54 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	e00e      	b.n	80034b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349a:	f7ff fb5b 	bl	8002b54 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d907      	bls.n	80034b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e150      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
 80034ac:	40023800 	.word	0x40023800
 80034b0:	42470000 	.word	0x42470000
 80034b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b8:	4b88      	ldr	r3, [pc, #544]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80034ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ea      	bne.n	800349a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8097 	beq.w	8003600 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d2:	2300      	movs	r3, #0
 80034d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d6:	4b81      	ldr	r3, [pc, #516]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10f      	bne.n	8003502 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	4b7d      	ldr	r3, [pc, #500]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	4a7c      	ldr	r2, [pc, #496]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80034ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034f2:	4b7a      	ldr	r3, [pc, #488]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fe:	2301      	movs	r3, #1
 8003500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003502:	4b77      	ldr	r3, [pc, #476]	@ (80036e0 <HAL_RCC_OscConfig+0x474>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d118      	bne.n	8003540 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350e:	4b74      	ldr	r3, [pc, #464]	@ (80036e0 <HAL_RCC_OscConfig+0x474>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a73      	ldr	r2, [pc, #460]	@ (80036e0 <HAL_RCC_OscConfig+0x474>)
 8003514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351a:	f7ff fb1b 	bl	8002b54 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003522:	f7ff fb17 	bl	8002b54 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e10c      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	4b6a      	ldr	r3, [pc, #424]	@ (80036e0 <HAL_RCC_OscConfig+0x474>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0x2ea>
 8003548:	4b64      	ldr	r3, [pc, #400]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354c:	4a63      	ldr	r2, [pc, #396]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6713      	str	r3, [r2, #112]	@ 0x70
 8003554:	e01c      	b.n	8003590 <HAL_RCC_OscConfig+0x324>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b05      	cmp	r3, #5
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x30c>
 800355e:	4b5f      	ldr	r3, [pc, #380]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003562:	4a5e      	ldr	r2, [pc, #376]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003564:	f043 0304 	orr.w	r3, r3, #4
 8003568:	6713      	str	r3, [r2, #112]	@ 0x70
 800356a:	4b5c      	ldr	r3, [pc, #368]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356e:	4a5b      	ldr	r2, [pc, #364]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6713      	str	r3, [r2, #112]	@ 0x70
 8003576:	e00b      	b.n	8003590 <HAL_RCC_OscConfig+0x324>
 8003578:	4b58      	ldr	r3, [pc, #352]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357c:	4a57      	ldr	r2, [pc, #348]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	6713      	str	r3, [r2, #112]	@ 0x70
 8003584:	4b55      	ldr	r3, [pc, #340]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003588:	4a54      	ldr	r2, [pc, #336]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800358a:	f023 0304 	bic.w	r3, r3, #4
 800358e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d015      	beq.n	80035c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003598:	f7ff fadc 	bl	8002b54 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a0:	f7ff fad8 	bl	8002b54 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e0cb      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b6:	4b49      	ldr	r3, [pc, #292]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0ee      	beq.n	80035a0 <HAL_RCC_OscConfig+0x334>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c4:	f7ff fac6 	bl	8002b54 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ca:	e00a      	b.n	80035e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035cc:	f7ff fac2 	bl	8002b54 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e0b5      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e2:	4b3e      	ldr	r3, [pc, #248]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1ee      	bne.n	80035cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d105      	bne.n	8003600 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f4:	4b39      	ldr	r3, [pc, #228]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	4a38      	ldr	r2, [pc, #224]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80035fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a1 	beq.w	800374c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800360a:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b08      	cmp	r3, #8
 8003614:	d05c      	beq.n	80036d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d141      	bne.n	80036a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361e:	4b31      	ldr	r3, [pc, #196]	@ (80036e4 <HAL_RCC_OscConfig+0x478>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7ff fa96 	bl	8002b54 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362c:	f7ff fa92 	bl	8002b54 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e087      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	4b27      	ldr	r3, [pc, #156]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69da      	ldr	r2, [r3, #28]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	019b      	lsls	r3, r3, #6
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	3b01      	subs	r3, #1
 8003664:	041b      	lsls	r3, r3, #16
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	061b      	lsls	r3, r3, #24
 800366e:	491b      	ldr	r1, [pc, #108]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003674:	4b1b      	ldr	r3, [pc, #108]	@ (80036e4 <HAL_RCC_OscConfig+0x478>)
 8003676:	2201      	movs	r2, #1
 8003678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367a:	f7ff fa6b 	bl	8002b54 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003682:	f7ff fa67 	bl	8002b54 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e05c      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003694:	4b11      	ldr	r3, [pc, #68]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x416>
 80036a0:	e054      	b.n	800374c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a2:	4b10      	ldr	r3, [pc, #64]	@ (80036e4 <HAL_RCC_OscConfig+0x478>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7ff fa54 	bl	8002b54 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b0:	f7ff fa50 	bl	8002b54 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e045      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c2:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x444>
 80036ce:	e03d      	b.n	800374c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d107      	bne.n	80036e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e038      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40007000 	.word	0x40007000
 80036e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <HAL_RCC_OscConfig+0x4ec>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d028      	beq.n	8003748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d121      	bne.n	8003748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370e:	429a      	cmp	r2, r3
 8003710:	d11a      	bne.n	8003748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003718:	4013      	ands	r3, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800371e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003720:	4293      	cmp	r3, r2
 8003722:	d111      	bne.n	8003748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	3b01      	subs	r3, #1
 8003732:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d107      	bne.n	8003748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800

0800375c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0cc      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003770:	4b68      	ldr	r3, [pc, #416]	@ (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d90c      	bls.n	8003798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b65      	ldr	r3, [pc, #404]	@ (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b63      	ldr	r3, [pc, #396]	@ (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0b8      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d020      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037b0:	4b59      	ldr	r3, [pc, #356]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4a58      	ldr	r2, [pc, #352]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c8:	4b53      	ldr	r3, [pc, #332]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4a52      	ldr	r2, [pc, #328]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d4:	4b50      	ldr	r3, [pc, #320]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	494d      	ldr	r1, [pc, #308]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d044      	beq.n	800387c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d107      	bne.n	800380a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	4b47      	ldr	r3, [pc, #284]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d119      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e07f      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d003      	beq.n	800381a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003816:	2b03      	cmp	r3, #3
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381a:	4b3f      	ldr	r3, [pc, #252]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e06f      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382a:	4b3b      	ldr	r3, [pc, #236]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e067      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800383a:	4b37      	ldr	r3, [pc, #220]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f023 0203 	bic.w	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4934      	ldr	r1, [pc, #208]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800384c:	f7ff f982 	bl	8002b54 <HAL_GetTick>
 8003850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	e00a      	b.n	800386a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003854:	f7ff f97e 	bl	8002b54 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e04f      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	4b2b      	ldr	r3, [pc, #172]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 020c 	and.w	r2, r3, #12
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	429a      	cmp	r2, r3
 800387a:	d1eb      	bne.n	8003854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800387c:	4b25      	ldr	r3, [pc, #148]	@ (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d20c      	bcs.n	80038a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b22      	ldr	r3, [pc, #136]	@ (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b20      	ldr	r3, [pc, #128]	@ (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e032      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b0:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4916      	ldr	r1, [pc, #88]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ce:	4b12      	ldr	r3, [pc, #72]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	490e      	ldr	r1, [pc, #56]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038e2:	f000 f821 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 80038e6:	4602      	mov	r2, r0
 80038e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	490a      	ldr	r1, [pc, #40]	@ (800391c <HAL_RCC_ClockConfig+0x1c0>)
 80038f4:	5ccb      	ldrb	r3, [r1, r3]
 80038f6:	fa22 f303 	lsr.w	r3, r2, r3
 80038fa:	4a09      	ldr	r2, [pc, #36]	@ (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038fe:	4b09      	ldr	r3, [pc, #36]	@ (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff f8e2 	bl	8002acc <HAL_InitTick>

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40023c00 	.word	0x40023c00
 8003918:	40023800 	.word	0x40023800
 800391c:	08005c04 	.word	0x08005c04
 8003920:	20000040 	.word	0x20000040
 8003924:	20000044 	.word	0x20000044

08003928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800392c:	b094      	sub	sp, #80	@ 0x50
 800392e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003940:	4b79      	ldr	r3, [pc, #484]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b08      	cmp	r3, #8
 800394a:	d00d      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0x40>
 800394c:	2b08      	cmp	r3, #8
 800394e:	f200 80e1 	bhi.w	8003b14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_RCC_GetSysClockFreq+0x34>
 8003956:	2b04      	cmp	r3, #4
 8003958:	d003      	beq.n	8003962 <HAL_RCC_GetSysClockFreq+0x3a>
 800395a:	e0db      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800395c:	4b73      	ldr	r3, [pc, #460]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x204>)
 800395e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003960:	e0db      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003962:	4b73      	ldr	r3, [pc, #460]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x208>)
 8003964:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003966:	e0d8      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003968:	4b6f      	ldr	r3, [pc, #444]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x200>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003970:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003972:	4b6d      	ldr	r3, [pc, #436]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d063      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800397e:	4b6a      	ldr	r3, [pc, #424]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	099b      	lsrs	r3, r3, #6
 8003984:	2200      	movs	r2, #0
 8003986:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003988:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800398a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003990:	633b      	str	r3, [r7, #48]	@ 0x30
 8003992:	2300      	movs	r3, #0
 8003994:	637b      	str	r3, [r7, #52]	@ 0x34
 8003996:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800399a:	4622      	mov	r2, r4
 800399c:	462b      	mov	r3, r5
 800399e:	f04f 0000 	mov.w	r0, #0
 80039a2:	f04f 0100 	mov.w	r1, #0
 80039a6:	0159      	lsls	r1, r3, #5
 80039a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ac:	0150      	lsls	r0, r2, #5
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4621      	mov	r1, r4
 80039b4:	1a51      	subs	r1, r2, r1
 80039b6:	6139      	str	r1, [r7, #16]
 80039b8:	4629      	mov	r1, r5
 80039ba:	eb63 0301 	sbc.w	r3, r3, r1
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039cc:	4659      	mov	r1, fp
 80039ce:	018b      	lsls	r3, r1, #6
 80039d0:	4651      	mov	r1, sl
 80039d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039d6:	4651      	mov	r1, sl
 80039d8:	018a      	lsls	r2, r1, #6
 80039da:	4651      	mov	r1, sl
 80039dc:	ebb2 0801 	subs.w	r8, r2, r1
 80039e0:	4659      	mov	r1, fp
 80039e2:	eb63 0901 	sbc.w	r9, r3, r1
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039fa:	4690      	mov	r8, r2
 80039fc:	4699      	mov	r9, r3
 80039fe:	4623      	mov	r3, r4
 8003a00:	eb18 0303 	adds.w	r3, r8, r3
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	462b      	mov	r3, r5
 8003a08:	eb49 0303 	adc.w	r3, r9, r3
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	024b      	lsls	r3, r1, #9
 8003a1e:	4621      	mov	r1, r4
 8003a20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a24:	4621      	mov	r1, r4
 8003a26:	024a      	lsls	r2, r1, #9
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a2e:	2200      	movs	r2, #0
 8003a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a38:	f7fc ffe4 	bl	8000a04 <__aeabi_uldivmod>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4613      	mov	r3, r2
 8003a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a44:	e058      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a46:	4b38      	ldr	r3, [pc, #224]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	099b      	lsrs	r3, r3, #6
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	4611      	mov	r1, r2
 8003a52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a56:	623b      	str	r3, [r7, #32]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a60:	4642      	mov	r2, r8
 8003a62:	464b      	mov	r3, r9
 8003a64:	f04f 0000 	mov.w	r0, #0
 8003a68:	f04f 0100 	mov.w	r1, #0
 8003a6c:	0159      	lsls	r1, r3, #5
 8003a6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a72:	0150      	lsls	r0, r2, #5
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4641      	mov	r1, r8
 8003a7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a7e:	4649      	mov	r1, r9
 8003a80:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a98:	ebb2 040a 	subs.w	r4, r2, sl
 8003a9c:	eb63 050b 	sbc.w	r5, r3, fp
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	00eb      	lsls	r3, r5, #3
 8003aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aae:	00e2      	lsls	r2, r4, #3
 8003ab0:	4614      	mov	r4, r2
 8003ab2:	461d      	mov	r5, r3
 8003ab4:	4643      	mov	r3, r8
 8003ab6:	18e3      	adds	r3, r4, r3
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	464b      	mov	r3, r9
 8003abc:	eb45 0303 	adc.w	r3, r5, r3
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ace:	4629      	mov	r1, r5
 8003ad0:	028b      	lsls	r3, r1, #10
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ad8:	4621      	mov	r1, r4
 8003ada:	028a      	lsls	r2, r1, #10
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	61fa      	str	r2, [r7, #28]
 8003ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aec:	f7fc ff8a 	bl	8000a04 <__aeabi_uldivmod>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4613      	mov	r3, r2
 8003af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003af8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	3301      	adds	r3, #1
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b12:	e002      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b14:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3750      	adds	r7, #80	@ 0x50
 8003b20:	46bd      	mov	sp, r7
 8003b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	00f42400 	.word	0x00f42400
 8003b30:	007a1200 	.word	0x007a1200

08003b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b38:	4b03      	ldr	r3, [pc, #12]	@ (8003b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20000040 	.word	0x20000040

08003b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b50:	f7ff fff0 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	0a9b      	lsrs	r3, r3, #10
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4903      	ldr	r1, [pc, #12]	@ (8003b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	08005c14 	.word	0x08005c14

08003b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b78:	f7ff ffdc 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	0b5b      	lsrs	r3, r3, #13
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4903      	ldr	r1, [pc, #12]	@ (8003b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40023800 	.word	0x40023800
 8003b98:	08005c14 	.word	0x08005c14

08003b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e041      	b.n	8003c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fe fdaa 	bl	800271c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f000 fc3c 	bl	8004458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d001      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e044      	b.n	8003cde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1e      	ldr	r2, [pc, #120]	@ (8003cec <HAL_TIM_Base_Start_IT+0xb0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d018      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c7e:	d013      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00e      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a19      	ldr	r2, [pc, #100]	@ (8003cf4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d009      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a17      	ldr	r2, [pc, #92]	@ (8003cf8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a16      	ldr	r2, [pc, #88]	@ (8003cfc <HAL_TIM_Base_Start_IT+0xc0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d111      	bne.n	8003ccc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d010      	beq.n	8003cdc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cca:	e007      	b.n	8003cdc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40010000 	.word	0x40010000
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800
 8003cf8:	40000c00 	.word	0x40000c00
 8003cfc:	40014000 	.word	0x40014000

08003d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e041      	b.n	8003d96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f839 	bl	8003d9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	f000 fb8a 	bl	8004458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <HAL_TIM_PWM_Start+0x24>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	bf14      	ite	ne
 8003dd0:	2301      	movne	r3, #1
 8003dd2:	2300      	moveq	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	e022      	b.n	8003e1e <HAL_TIM_PWM_Start+0x6a>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d109      	bne.n	8003df2 <HAL_TIM_PWM_Start+0x3e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	e015      	b.n	8003e1e <HAL_TIM_PWM_Start+0x6a>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d109      	bne.n	8003e0c <HAL_TIM_PWM_Start+0x58>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e008      	b.n	8003e1e <HAL_TIM_PWM_Start+0x6a>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	bf14      	ite	ne
 8003e18:	2301      	movne	r3, #1
 8003e1a:	2300      	moveq	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e068      	b.n	8003ef8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d104      	bne.n	8003e36 <HAL_TIM_PWM_Start+0x82>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e34:	e013      	b.n	8003e5e <HAL_TIM_PWM_Start+0xaa>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d104      	bne.n	8003e46 <HAL_TIM_PWM_Start+0x92>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e44:	e00b      	b.n	8003e5e <HAL_TIM_PWM_Start+0xaa>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d104      	bne.n	8003e56 <HAL_TIM_PWM_Start+0xa2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e54:	e003      	b.n	8003e5e <HAL_TIM_PWM_Start+0xaa>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2201      	movs	r2, #1
 8003e64:	6839      	ldr	r1, [r7, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fda2 	bl	80049b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a23      	ldr	r2, [pc, #140]	@ (8003f00 <HAL_TIM_PWM_Start+0x14c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d107      	bne.n	8003e86 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f00 <HAL_TIM_PWM_Start+0x14c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d018      	beq.n	8003ec2 <HAL_TIM_PWM_Start+0x10e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e98:	d013      	beq.n	8003ec2 <HAL_TIM_PWM_Start+0x10e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a19      	ldr	r2, [pc, #100]	@ (8003f04 <HAL_TIM_PWM_Start+0x150>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_TIM_PWM_Start+0x10e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a17      	ldr	r2, [pc, #92]	@ (8003f08 <HAL_TIM_PWM_Start+0x154>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <HAL_TIM_PWM_Start+0x10e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a16      	ldr	r2, [pc, #88]	@ (8003f0c <HAL_TIM_PWM_Start+0x158>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <HAL_TIM_PWM_Start+0x10e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a14      	ldr	r2, [pc, #80]	@ (8003f10 <HAL_TIM_PWM_Start+0x15c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d111      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b06      	cmp	r3, #6
 8003ed2:	d010      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee4:	e007      	b.n	8003ef6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40010000 	.word	0x40010000
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	40000c00 	.word	0x40000c00
 8003f10:	40014000 	.word	0x40014000

08003f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d020      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01b      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0202 	mvn.w	r2, #2
 8003f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa5b 	bl	800441a <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa4d 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fa5e 	bl	800442e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d020      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0204 	mvn.w	r2, #4
 8003f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa35 	bl	800441a <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa27 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fa38 	bl	800442e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d020      	beq.n	8004010 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01b      	beq.n	8004010 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0208 	mvn.w	r2, #8
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fa0f 	bl	800441a <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa01 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fa12 	bl	800442e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d020      	beq.n	800405c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01b      	beq.n	800405c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0210 	mvn.w	r2, #16
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2208      	movs	r2, #8
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f9e9 	bl	800441a <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f9db 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f9ec 	bl	800442e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00c      	beq.n	8004080 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0201 	mvn.w	r2, #1
 8004078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fe fb0c 	bl	8002698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00c      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800409c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fd76 	bl	8004b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00c      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f9bd 	bl	8004442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0220 	mvn.w	r2, #32
 80040e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fd48 	bl	8004b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800410e:	2302      	movs	r3, #2
 8004110:	e0ae      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	f200 809f 	bhi.w	8004260 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004122:	a201      	add	r2, pc, #4	@ (adr r2, 8004128 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800415d 	.word	0x0800415d
 800412c:	08004261 	.word	0x08004261
 8004130:	08004261 	.word	0x08004261
 8004134:	08004261 	.word	0x08004261
 8004138:	0800419d 	.word	0x0800419d
 800413c:	08004261 	.word	0x08004261
 8004140:	08004261 	.word	0x08004261
 8004144:	08004261 	.word	0x08004261
 8004148:	080041df 	.word	0x080041df
 800414c:	08004261 	.word	0x08004261
 8004150:	08004261 	.word	0x08004261
 8004154:	08004261 	.word	0x08004261
 8004158:	0800421f 	.word	0x0800421f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f9fe 	bl	8004564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0208 	orr.w	r2, r2, #8
 8004176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0204 	bic.w	r2, r2, #4
 8004186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6999      	ldr	r1, [r3, #24]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	619a      	str	r2, [r3, #24]
      break;
 800419a:	e064      	b.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fa44 	bl	8004630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6999      	ldr	r1, [r3, #24]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	021a      	lsls	r2, r3, #8
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	619a      	str	r2, [r3, #24]
      break;
 80041dc:	e043      	b.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fa8f 	bl	8004708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69da      	ldr	r2, [r3, #28]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0208 	orr.w	r2, r2, #8
 80041f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0204 	bic.w	r2, r2, #4
 8004208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69d9      	ldr	r1, [r3, #28]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	61da      	str	r2, [r3, #28]
      break;
 800421c:	e023      	b.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fad9 	bl	80047dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69d9      	ldr	r1, [r3, #28]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	021a      	lsls	r2, r3, #8
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	61da      	str	r2, [r3, #28]
      break;
 800425e:	e002      	b.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	75fb      	strb	r3, [r7, #23]
      break;
 8004264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800426e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIM_ConfigClockSource+0x1c>
 8004290:	2302      	movs	r3, #2
 8004292:	e0b4      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x186>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042cc:	d03e      	beq.n	800434c <HAL_TIM_ConfigClockSource+0xd4>
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d2:	f200 8087 	bhi.w	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042da:	f000 8086 	beq.w	80043ea <HAL_TIM_ConfigClockSource+0x172>
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e2:	d87f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042e4:	2b70      	cmp	r3, #112	@ 0x70
 80042e6:	d01a      	beq.n	800431e <HAL_TIM_ConfigClockSource+0xa6>
 80042e8:	2b70      	cmp	r3, #112	@ 0x70
 80042ea:	d87b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	2b60      	cmp	r3, #96	@ 0x60
 80042ee:	d050      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x11a>
 80042f0:	2b60      	cmp	r3, #96	@ 0x60
 80042f2:	d877      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042f4:	2b50      	cmp	r3, #80	@ 0x50
 80042f6:	d03c      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0xfa>
 80042f8:	2b50      	cmp	r3, #80	@ 0x50
 80042fa:	d873      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b40      	cmp	r3, #64	@ 0x40
 80042fe:	d058      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004300:	2b40      	cmp	r3, #64	@ 0x40
 8004302:	d86f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	2b30      	cmp	r3, #48	@ 0x30
 8004306:	d064      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004308:	2b30      	cmp	r3, #48	@ 0x30
 800430a:	d86b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d060      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d867      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d05c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004318:	2b10      	cmp	r3, #16
 800431a:	d05a      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 800431c:	e062      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800432e:	f000 fb1f 	bl	8004970 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	609a      	str	r2, [r3, #8]
      break;
 800434a:	e04f      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800435c:	f000 fb08 	bl	8004970 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800436e:	609a      	str	r2, [r3, #8]
      break;
 8004370:	e03c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800437e:	461a      	mov	r2, r3
 8004380:	f000 fa7c 	bl	800487c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2150      	movs	r1, #80	@ 0x50
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fad5 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 8004390:	e02c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800439e:	461a      	mov	r2, r3
 80043a0:	f000 fa9b 	bl	80048da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2160      	movs	r1, #96	@ 0x60
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fac5 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 80043b0:	e01c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 fa5c 	bl	800487c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2140      	movs	r1, #64	@ 0x40
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fab5 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 80043d0:	e00c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f000 faac 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 80043e2:	e003      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      break;
 80043e8:	e000      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a37      	ldr	r2, [pc, #220]	@ (8004548 <TIM_Base_SetConfig+0xf0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00f      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004476:	d00b      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a34      	ldr	r2, [pc, #208]	@ (800454c <TIM_Base_SetConfig+0xf4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a33      	ldr	r2, [pc, #204]	@ (8004550 <TIM_Base_SetConfig+0xf8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a32      	ldr	r2, [pc, #200]	@ (8004554 <TIM_Base_SetConfig+0xfc>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d108      	bne.n	80044a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a28      	ldr	r2, [pc, #160]	@ (8004548 <TIM_Base_SetConfig+0xf0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01b      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b0:	d017      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a25      	ldr	r2, [pc, #148]	@ (800454c <TIM_Base_SetConfig+0xf4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a24      	ldr	r2, [pc, #144]	@ (8004550 <TIM_Base_SetConfig+0xf8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00f      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a23      	ldr	r2, [pc, #140]	@ (8004554 <TIM_Base_SetConfig+0xfc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a22      	ldr	r2, [pc, #136]	@ (8004558 <TIM_Base_SetConfig+0x100>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a21      	ldr	r2, [pc, #132]	@ (800455c <TIM_Base_SetConfig+0x104>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a20      	ldr	r2, [pc, #128]	@ (8004560 <TIM_Base_SetConfig+0x108>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d108      	bne.n	80044f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a0c      	ldr	r2, [pc, #48]	@ (8004548 <TIM_Base_SetConfig+0xf0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d103      	bne.n	8004522 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f043 0204 	orr.w	r2, r3, #4
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	601a      	str	r2, [r3, #0]
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40014000 	.word	0x40014000
 800455c:	40014400 	.word	0x40014400
 8004560:	40014800 	.word	0x40014800

08004564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f023 0201 	bic.w	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0303 	bic.w	r3, r3, #3
 800459a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f023 0302 	bic.w	r3, r3, #2
 80045ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a1c      	ldr	r2, [pc, #112]	@ (800462c <TIM_OC1_SetConfig+0xc8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d10c      	bne.n	80045da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 0308 	bic.w	r3, r3, #8
 80045c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f023 0304 	bic.w	r3, r3, #4
 80045d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a13      	ldr	r2, [pc, #76]	@ (800462c <TIM_OC1_SetConfig+0xc8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d111      	bne.n	8004606 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	621a      	str	r2, [r3, #32]
}
 8004620:	bf00      	nop
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	40010000 	.word	0x40010000

08004630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f023 0210 	bic.w	r2, r3, #16
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f023 0320 	bic.w	r3, r3, #32
 800467a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a1e      	ldr	r2, [pc, #120]	@ (8004704 <TIM_OC2_SetConfig+0xd4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d10d      	bne.n	80046ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a15      	ldr	r2, [pc, #84]	@ (8004704 <TIM_OC2_SetConfig+0xd4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d113      	bne.n	80046dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40010000 	.word	0x40010000

08004708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0303 	bic.w	r3, r3, #3
 800473e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a1d      	ldr	r2, [pc, #116]	@ (80047d8 <TIM_OC3_SetConfig+0xd0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d10d      	bne.n	8004782 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800476c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a14      	ldr	r2, [pc, #80]	@ (80047d8 <TIM_OC3_SetConfig+0xd0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d113      	bne.n	80047b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	621a      	str	r2, [r3, #32]
}
 80047cc:	bf00      	nop
 80047ce:	371c      	adds	r7, #28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	40010000 	.word	0x40010000

080047dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	031b      	lsls	r3, r3, #12
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a10      	ldr	r2, [pc, #64]	@ (8004878 <TIM_OC4_SetConfig+0x9c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d109      	bne.n	8004850 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004842:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	621a      	str	r2, [r3, #32]
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40010000 	.word	0x40010000

0800487c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f023 0201 	bic.w	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f023 030a 	bic.w	r3, r3, #10
 80048b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048da:	b480      	push	{r7}
 80048dc:	b087      	sub	sp, #28
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f023 0210 	bic.w	r2, r3, #16
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	031b      	lsls	r3, r3, #12
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004916:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	f043 0307 	orr.w	r3, r3, #7
 800495c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	609a      	str	r2, [r3, #8]
}
 8004964:	bf00      	nop
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800498a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	021a      	lsls	r2, r3, #8
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	431a      	orrs	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4313      	orrs	r3, r2
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	609a      	str	r2, [r3, #8]
}
 80049a4:	bf00      	nop
 80049a6:	371c      	adds	r7, #28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	2201      	movs	r2, #1
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1a      	ldr	r2, [r3, #32]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	401a      	ands	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a1a      	ldr	r2, [r3, #32]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	fa01 f303 	lsl.w	r3, r1, r3
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
	...

080049fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e050      	b.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d018      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a60:	d013      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a18      	ldr	r2, [pc, #96]	@ (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a16      	ldr	r2, [pc, #88]	@ (8004acc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a15      	ldr	r2, [pc, #84]	@ (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a13      	ldr	r2, [pc, #76]	@ (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d10c      	bne.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40014000 	.word	0x40014000

08004ad8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e03d      	b.n	8004b70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e042      	b.n	8004c3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fd fe56 	bl	800287c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2224      	movs	r2, #36	@ 0x24
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fd51 	bl	8005690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d121      	bne.n	8004ca2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_UART_Transmit_IT+0x26>
 8004c64:	88fb      	ldrh	r3, [r7, #6]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e01a      	b.n	8004ca4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	88fa      	ldrh	r2, [r7, #6]
 8004c78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	88fa      	ldrh	r2, [r7, #6]
 8004c7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2221      	movs	r2, #33	@ 0x21
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c9c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
  }
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08c      	sub	sp, #48	@ 0x30
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d14a      	bne.n	8004d60 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004cd0:	88fb      	ldrh	r3, [r7, #6]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e043      	b.n	8004d62 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fafb 	bl	80052e8 <UART_Start_Receive_IT>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004cf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d12c      	bne.n	8004d5a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d125      	bne.n	8004d54 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d08:	2300      	movs	r3, #0
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	330c      	adds	r3, #12
 8004d24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f043 0310 	orr.w	r3, r3, #16
 8004d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	6a39      	ldr	r1, [r7, #32]
 8004d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1e5      	bne.n	8004d1e <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004d52:	e002      	b.n	8004d5a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d5e:	e000      	b.n	8004d62 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3730      	adds	r7, #48	@ 0x30
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b0ba      	sub	sp, #232	@ 0xe8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10f      	bne.n	8004dd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d009      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x66>
 8004dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fba2 	bl	8005514 <UART_Receive_IT>
      return;
 8004dd0:	e273      	b.n	80052ba <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 80de 	beq.w	8004f98 <HAL_UART_IRQHandler+0x22c>
 8004ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d106      	bne.n	8004df6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 80d1 	beq.w	8004f98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <HAL_UART_IRQHandler+0xae>
 8004e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e12:	f043 0201 	orr.w	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00b      	beq.n	8004e3e <HAL_UART_IRQHandler+0xd2>
 8004e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	f043 0202 	orr.w	r2, r3, #2
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00b      	beq.n	8004e62 <HAL_UART_IRQHandler+0xf6>
 8004e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5a:	f043 0204 	orr.w	r2, r3, #4
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d011      	beq.n	8004e92 <HAL_UART_IRQHandler+0x126>
 8004e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d105      	bne.n	8004e86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8a:	f043 0208 	orr.w	r2, r3, #8
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 820a 	beq.w	80052b0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_UART_IRQHandler+0x14e>
 8004ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fb2d 	bl	8005514 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec4:	2b40      	cmp	r3, #64	@ 0x40
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2301      	moveq	r3, #1
 8004eca:	2300      	movne	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x17a>
 8004ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d04f      	beq.n	8004f86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fa38 	bl	800535c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef6:	2b40      	cmp	r3, #64	@ 0x40
 8004ef8:	d141      	bne.n	8004f7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3314      	adds	r3, #20
 8004f00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3314      	adds	r3, #20
 8004f22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1d9      	bne.n	8004efa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d013      	beq.n	8004f76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f52:	4a8a      	ldr	r2, [pc, #552]	@ (800517c <HAL_UART_IRQHandler+0x410>)
 8004f54:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fd ffab 	bl	8002eb6 <HAL_DMA_Abort_IT>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f70:	4610      	mov	r0, r2
 8004f72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f74:	e00e      	b.n	8004f94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f9ac 	bl	80052d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	e00a      	b.n	8004f94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f9a8 	bl	80052d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	e006      	b.n	8004f94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f9a4 	bl	80052d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f92:	e18d      	b.n	80052b0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f94:	bf00      	nop
    return;
 8004f96:	e18b      	b.n	80052b0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	f040 8167 	bne.w	8005270 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 8160 	beq.w	8005270 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 8159 	beq.w	8005270 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fde:	2b40      	cmp	r3, #64	@ 0x40
 8004fe0:	f040 80ce 	bne.w	8005180 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ff0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80a9 	beq.w	800514c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005002:	429a      	cmp	r2, r3
 8005004:	f080 80a2 	bcs.w	800514c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800500e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800501a:	f000 8088 	beq.w	800512e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005034:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800503c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	330c      	adds	r3, #12
 8005046:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800504a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800504e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005056:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1d9      	bne.n	800501e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3314      	adds	r3, #20
 8005070:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800507a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800507c:	f023 0301 	bic.w	r3, r3, #1
 8005080:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3314      	adds	r3, #20
 800508a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800508e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005092:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005096:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e1      	bne.n	800506a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3314      	adds	r3, #20
 80050ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3314      	adds	r3, #20
 80050c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e3      	bne.n	80050a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	330c      	adds	r3, #12
 80050f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050fe:	f023 0310 	bic.w	r3, r3, #16
 8005102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005110:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005112:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005116:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800511e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e3      	bne.n	80050ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005128:	4618      	mov	r0, r3
 800512a:	f7fd fe54 	bl	8002dd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800513c:	b29b      	uxth	r3, r3
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	b29b      	uxth	r3, r3
 8005142:	4619      	mov	r1, r3
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7fc ffcf 	bl	80020e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800514a:	e0b3      	b.n	80052b4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005150:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005154:	429a      	cmp	r2, r3
 8005156:	f040 80ad 	bne.w	80052b4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005164:	f040 80a6 	bne.w	80052b4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fc ffb7 	bl	80020e8 <HAL_UARTEx_RxEventCallback>
      return;
 800517a:	e09b      	b.n	80052b4 <HAL_UART_IRQHandler+0x548>
 800517c:	08005423 	.word	0x08005423
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005188:	b29b      	uxth	r3, r3
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 808e 	beq.w	80052b8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800519c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8089 	beq.w	80052b8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80051cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e3      	bne.n	80051a6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3314      	adds	r3, #20
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	623b      	str	r3, [r7, #32]
   return(result);
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	f023 0301 	bic.w	r3, r3, #1
 80051f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3314      	adds	r3, #20
 80051fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005202:	633a      	str	r2, [r7, #48]	@ 0x30
 8005204:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e3      	bne.n	80051de <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	330c      	adds	r3, #12
 800522a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	60fb      	str	r3, [r7, #12]
   return(result);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0310 	bic.w	r3, r3, #16
 800523a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005248:	61fa      	str	r2, [r7, #28]
 800524a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	69b9      	ldr	r1, [r7, #24]
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	617b      	str	r3, [r7, #20]
   return(result);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e3      	bne.n	8005224 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005262:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7fc ff3d 	bl	80020e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800526e:	e023      	b.n	80052b8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005278:	2b00      	cmp	r3, #0
 800527a:	d009      	beq.n	8005290 <HAL_UART_IRQHandler+0x524>
 800527c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f8db 	bl	8005444 <UART_Transmit_IT>
    return;
 800528e:	e014      	b.n	80052ba <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00e      	beq.n	80052ba <HAL_UART_IRQHandler+0x54e>
 800529c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f91b 	bl	80054e4 <UART_EndTransmit_IT>
    return;
 80052ae:	e004      	b.n	80052ba <HAL_UART_IRQHandler+0x54e>
    return;
 80052b0:	bf00      	nop
 80052b2:	e002      	b.n	80052ba <HAL_UART_IRQHandler+0x54e>
      return;
 80052b4:	bf00      	nop
 80052b6:	e000      	b.n	80052ba <HAL_UART_IRQHandler+0x54e>
      return;
 80052b8:	bf00      	nop
  }
}
 80052ba:	37e8      	adds	r7, #232	@ 0xe8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	4613      	mov	r3, r2
 80052f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	88fa      	ldrh	r2, [r7, #6]
 8005300:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	88fa      	ldrh	r2, [r7, #6]
 8005306:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2222      	movs	r2, #34	@ 0x22
 8005312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d007      	beq.n	800532e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800532c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0201 	orr.w	r2, r2, #1
 800533c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0220 	orr.w	r2, r2, #32
 800534c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800535c:	b480      	push	{r7}
 800535e:	b095      	sub	sp, #84	@ 0x54
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800537a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005384:	643a      	str	r2, [r7, #64]	@ 0x40
 8005386:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005388:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800538a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800538c:	e841 2300 	strex	r3, r2, [r1]
 8005390:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e5      	bne.n	8005364 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3314      	adds	r3, #20
 800539e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	e853 3f00 	ldrex	r3, [r3]
 80053a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f023 0301 	bic.w	r3, r3, #1
 80053ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3314      	adds	r3, #20
 80053b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053c0:	e841 2300 	strex	r3, r2, [r1]
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1e5      	bne.n	8005398 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d119      	bne.n	8005408 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	330c      	adds	r3, #12
 80053da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f023 0310 	bic.w	r3, r3, #16
 80053ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	330c      	adds	r3, #12
 80053f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053f4:	61ba      	str	r2, [r7, #24]
 80053f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6979      	ldr	r1, [r7, #20]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	613b      	str	r3, [r7, #16]
   return(result);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e5      	bne.n	80053d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005416:	bf00      	nop
 8005418:	3754      	adds	r7, #84	@ 0x54
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff ff4c 	bl	80052d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b21      	cmp	r3, #33	@ 0x21
 8005456:	d13e      	bne.n	80054d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005460:	d114      	bne.n	800548c <UART_Transmit_IT+0x48>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d110      	bne.n	800548c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800547e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	1c9a      	adds	r2, r3, #2
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	621a      	str	r2, [r3, #32]
 800548a:	e008      	b.n	800549e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	1c59      	adds	r1, r3, #1
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6211      	str	r1, [r2, #32]
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4619      	mov	r1, r3
 80054ac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10f      	bne.n	80054d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e000      	b.n	80054d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
  }
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7fd f8b1 	bl	800266c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08c      	sub	sp, #48	@ 0x30
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800551c:	2300      	movs	r3, #0
 800551e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005520:	2300      	movs	r3, #0
 8005522:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b22      	cmp	r3, #34	@ 0x22
 800552e:	f040 80aa 	bne.w	8005686 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800553a:	d115      	bne.n	8005568 <UART_Receive_IT+0x54>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d111      	bne.n	8005568 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005556:	b29a      	uxth	r2, r3
 8005558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	1c9a      	adds	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	629a      	str	r2, [r3, #40]	@ 0x28
 8005566:	e024      	b.n	80055b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005576:	d007      	beq.n	8005588 <UART_Receive_IT+0x74>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <UART_Receive_IT+0x82>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d106      	bne.n	8005596 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	b2da      	uxtb	r2, r3
 8005590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005592:	701a      	strb	r2, [r3, #0]
 8005594:	e008      	b.n	80055a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	4619      	mov	r1, r3
 80055c0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d15d      	bne.n	8005682 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0220 	bic.w	r2, r2, #32
 80055d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695a      	ldr	r2, [r3, #20]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005608:	2b01      	cmp	r3, #1
 800560a:	d135      	bne.n	8005678 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	330c      	adds	r3, #12
 8005618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	613b      	str	r3, [r7, #16]
   return(result);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f023 0310 	bic.w	r3, r3, #16
 8005628:	627b      	str	r3, [r7, #36]	@ 0x24
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	330c      	adds	r3, #12
 8005630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005632:	623a      	str	r2, [r7, #32]
 8005634:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	69f9      	ldr	r1, [r7, #28]
 8005638:	6a3a      	ldr	r2, [r7, #32]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e5      	bne.n	8005612 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b10      	cmp	r3, #16
 8005652:	d10a      	bne.n	800566a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7fc fd39 	bl	80020e8 <HAL_UARTEx_RxEventCallback>
 8005676:	e002      	b.n	800567e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff fe21 	bl	80052c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	e002      	b.n	8005688 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	e000      	b.n	8005688 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005686:	2302      	movs	r3, #2
  }
}
 8005688:	4618      	mov	r0, r3
 800568a:	3730      	adds	r7, #48	@ 0x30
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005694:	b0c0      	sub	sp, #256	@ 0x100
 8005696:	af00      	add	r7, sp, #0
 8005698:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ac:	68d9      	ldr	r1, [r3, #12]
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	ea40 0301 	orr.w	r3, r0, r1
 80056b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056e8:	f021 010c 	bic.w	r1, r1, #12
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056f6:	430b      	orrs	r3, r1
 80056f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570a:	6999      	ldr	r1, [r3, #24]
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	ea40 0301 	orr.w	r3, r0, r1
 8005716:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4b8f      	ldr	r3, [pc, #572]	@ (800595c <UART_SetConfig+0x2cc>)
 8005720:	429a      	cmp	r2, r3
 8005722:	d005      	beq.n	8005730 <UART_SetConfig+0xa0>
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4b8d      	ldr	r3, [pc, #564]	@ (8005960 <UART_SetConfig+0x2d0>)
 800572c:	429a      	cmp	r2, r3
 800572e:	d104      	bne.n	800573a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005730:	f7fe fa20 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 8005734:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005738:	e003      	b.n	8005742 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800573a:	f7fe fa07 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 800573e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800574c:	f040 810c 	bne.w	8005968 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005754:	2200      	movs	r2, #0
 8005756:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800575a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800575e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005762:	4622      	mov	r2, r4
 8005764:	462b      	mov	r3, r5
 8005766:	1891      	adds	r1, r2, r2
 8005768:	65b9      	str	r1, [r7, #88]	@ 0x58
 800576a:	415b      	adcs	r3, r3
 800576c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800576e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005772:	4621      	mov	r1, r4
 8005774:	eb12 0801 	adds.w	r8, r2, r1
 8005778:	4629      	mov	r1, r5
 800577a:	eb43 0901 	adc.w	r9, r3, r1
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800578a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800578e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005792:	4690      	mov	r8, r2
 8005794:	4699      	mov	r9, r3
 8005796:	4623      	mov	r3, r4
 8005798:	eb18 0303 	adds.w	r3, r8, r3
 800579c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057a0:	462b      	mov	r3, r5
 80057a2:	eb49 0303 	adc.w	r3, r9, r3
 80057a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057be:	460b      	mov	r3, r1
 80057c0:	18db      	adds	r3, r3, r3
 80057c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80057c4:	4613      	mov	r3, r2
 80057c6:	eb42 0303 	adc.w	r3, r2, r3
 80057ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80057cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057d4:	f7fb f916 	bl	8000a04 <__aeabi_uldivmod>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4b61      	ldr	r3, [pc, #388]	@ (8005964 <UART_SetConfig+0x2d4>)
 80057de:	fba3 2302 	umull	r2, r3, r3, r2
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	011c      	lsls	r4, r3, #4
 80057e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057f8:	4642      	mov	r2, r8
 80057fa:	464b      	mov	r3, r9
 80057fc:	1891      	adds	r1, r2, r2
 80057fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005800:	415b      	adcs	r3, r3
 8005802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005804:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005808:	4641      	mov	r1, r8
 800580a:	eb12 0a01 	adds.w	sl, r2, r1
 800580e:	4649      	mov	r1, r9
 8005810:	eb43 0b01 	adc.w	fp, r3, r1
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005820:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005824:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005828:	4692      	mov	sl, r2
 800582a:	469b      	mov	fp, r3
 800582c:	4643      	mov	r3, r8
 800582e:	eb1a 0303 	adds.w	r3, sl, r3
 8005832:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005836:	464b      	mov	r3, r9
 8005838:	eb4b 0303 	adc.w	r3, fp, r3
 800583c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800584c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005850:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005854:	460b      	mov	r3, r1
 8005856:	18db      	adds	r3, r3, r3
 8005858:	643b      	str	r3, [r7, #64]	@ 0x40
 800585a:	4613      	mov	r3, r2
 800585c:	eb42 0303 	adc.w	r3, r2, r3
 8005860:	647b      	str	r3, [r7, #68]	@ 0x44
 8005862:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005866:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800586a:	f7fb f8cb 	bl	8000a04 <__aeabi_uldivmod>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4611      	mov	r1, r2
 8005874:	4b3b      	ldr	r3, [pc, #236]	@ (8005964 <UART_SetConfig+0x2d4>)
 8005876:	fba3 2301 	umull	r2, r3, r3, r1
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	2264      	movs	r2, #100	@ 0x64
 800587e:	fb02 f303 	mul.w	r3, r2, r3
 8005882:	1acb      	subs	r3, r1, r3
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800588a:	4b36      	ldr	r3, [pc, #216]	@ (8005964 <UART_SetConfig+0x2d4>)
 800588c:	fba3 2302 	umull	r2, r3, r3, r2
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005898:	441c      	add	r4, r3
 800589a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80058ac:	4642      	mov	r2, r8
 80058ae:	464b      	mov	r3, r9
 80058b0:	1891      	adds	r1, r2, r2
 80058b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058b4:	415b      	adcs	r3, r3
 80058b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058bc:	4641      	mov	r1, r8
 80058be:	1851      	adds	r1, r2, r1
 80058c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80058c2:	4649      	mov	r1, r9
 80058c4:	414b      	adcs	r3, r1
 80058c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058d4:	4659      	mov	r1, fp
 80058d6:	00cb      	lsls	r3, r1, #3
 80058d8:	4651      	mov	r1, sl
 80058da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058de:	4651      	mov	r1, sl
 80058e0:	00ca      	lsls	r2, r1, #3
 80058e2:	4610      	mov	r0, r2
 80058e4:	4619      	mov	r1, r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	4642      	mov	r2, r8
 80058ea:	189b      	adds	r3, r3, r2
 80058ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058f0:	464b      	mov	r3, r9
 80058f2:	460a      	mov	r2, r1
 80058f4:	eb42 0303 	adc.w	r3, r2, r3
 80058f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005908:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800590c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005910:	460b      	mov	r3, r1
 8005912:	18db      	adds	r3, r3, r3
 8005914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005916:	4613      	mov	r3, r2
 8005918:	eb42 0303 	adc.w	r3, r2, r3
 800591c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800591e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005922:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005926:	f7fb f86d 	bl	8000a04 <__aeabi_uldivmod>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <UART_SetConfig+0x2d4>)
 8005930:	fba3 1302 	umull	r1, r3, r3, r2
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	2164      	movs	r1, #100	@ 0x64
 8005938:	fb01 f303 	mul.w	r3, r1, r3
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	3332      	adds	r3, #50	@ 0x32
 8005942:	4a08      	ldr	r2, [pc, #32]	@ (8005964 <UART_SetConfig+0x2d4>)
 8005944:	fba2 2303 	umull	r2, r3, r2, r3
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	f003 0207 	and.w	r2, r3, #7
 800594e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4422      	add	r2, r4
 8005956:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005958:	e106      	b.n	8005b68 <UART_SetConfig+0x4d8>
 800595a:	bf00      	nop
 800595c:	40011000 	.word	0x40011000
 8005960:	40011400 	.word	0x40011400
 8005964:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800596c:	2200      	movs	r2, #0
 800596e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005972:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005976:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800597a:	4642      	mov	r2, r8
 800597c:	464b      	mov	r3, r9
 800597e:	1891      	adds	r1, r2, r2
 8005980:	6239      	str	r1, [r7, #32]
 8005982:	415b      	adcs	r3, r3
 8005984:	627b      	str	r3, [r7, #36]	@ 0x24
 8005986:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800598a:	4641      	mov	r1, r8
 800598c:	1854      	adds	r4, r2, r1
 800598e:	4649      	mov	r1, r9
 8005990:	eb43 0501 	adc.w	r5, r3, r1
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	00eb      	lsls	r3, r5, #3
 800599e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059a2:	00e2      	lsls	r2, r4, #3
 80059a4:	4614      	mov	r4, r2
 80059a6:	461d      	mov	r5, r3
 80059a8:	4643      	mov	r3, r8
 80059aa:	18e3      	adds	r3, r4, r3
 80059ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059b0:	464b      	mov	r3, r9
 80059b2:	eb45 0303 	adc.w	r3, r5, r3
 80059b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059d6:	4629      	mov	r1, r5
 80059d8:	008b      	lsls	r3, r1, #2
 80059da:	4621      	mov	r1, r4
 80059dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059e0:	4621      	mov	r1, r4
 80059e2:	008a      	lsls	r2, r1, #2
 80059e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059e8:	f7fb f80c 	bl	8000a04 <__aeabi_uldivmod>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4b60      	ldr	r3, [pc, #384]	@ (8005b74 <UART_SetConfig+0x4e4>)
 80059f2:	fba3 2302 	umull	r2, r3, r3, r2
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	011c      	lsls	r4, r3, #4
 80059fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	1891      	adds	r1, r2, r2
 8005a12:	61b9      	str	r1, [r7, #24]
 8005a14:	415b      	adcs	r3, r3
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	1851      	adds	r1, r2, r1
 8005a20:	6139      	str	r1, [r7, #16]
 8005a22:	4649      	mov	r1, r9
 8005a24:	414b      	adcs	r3, r1
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a34:	4659      	mov	r1, fp
 8005a36:	00cb      	lsls	r3, r1, #3
 8005a38:	4651      	mov	r1, sl
 8005a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a3e:	4651      	mov	r1, sl
 8005a40:	00ca      	lsls	r2, r1, #3
 8005a42:	4610      	mov	r0, r2
 8005a44:	4619      	mov	r1, r3
 8005a46:	4603      	mov	r3, r0
 8005a48:	4642      	mov	r2, r8
 8005a4a:	189b      	adds	r3, r3, r2
 8005a4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a50:	464b      	mov	r3, r9
 8005a52:	460a      	mov	r2, r1
 8005a54:	eb42 0303 	adc.w	r3, r2, r3
 8005a58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a74:	4649      	mov	r1, r9
 8005a76:	008b      	lsls	r3, r1, #2
 8005a78:	4641      	mov	r1, r8
 8005a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a7e:	4641      	mov	r1, r8
 8005a80:	008a      	lsls	r2, r1, #2
 8005a82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a86:	f7fa ffbd 	bl	8000a04 <__aeabi_uldivmod>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4611      	mov	r1, r2
 8005a90:	4b38      	ldr	r3, [pc, #224]	@ (8005b74 <UART_SetConfig+0x4e4>)
 8005a92:	fba3 2301 	umull	r2, r3, r3, r1
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	2264      	movs	r2, #100	@ 0x64
 8005a9a:	fb02 f303 	mul.w	r3, r2, r3
 8005a9e:	1acb      	subs	r3, r1, r3
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	3332      	adds	r3, #50	@ 0x32
 8005aa4:	4a33      	ldr	r2, [pc, #204]	@ (8005b74 <UART_SetConfig+0x4e4>)
 8005aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ab0:	441c      	add	r4, r3
 8005ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005aba:	677a      	str	r2, [r7, #116]	@ 0x74
 8005abc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	1891      	adds	r1, r2, r2
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	415b      	adcs	r3, r3
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	1851      	adds	r1, r2, r1
 8005ad4:	6039      	str	r1, [r7, #0]
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	414b      	adcs	r3, r1
 8005ada:	607b      	str	r3, [r7, #4]
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ae8:	4659      	mov	r1, fp
 8005aea:	00cb      	lsls	r3, r1, #3
 8005aec:	4651      	mov	r1, sl
 8005aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005af2:	4651      	mov	r1, sl
 8005af4:	00ca      	lsls	r2, r1, #3
 8005af6:	4610      	mov	r0, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	4603      	mov	r3, r0
 8005afc:	4642      	mov	r2, r8
 8005afe:	189b      	adds	r3, r3, r2
 8005b00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b02:	464b      	mov	r3, r9
 8005b04:	460a      	mov	r2, r1
 8005b06:	eb42 0303 	adc.w	r3, r2, r3
 8005b0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b16:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b24:	4649      	mov	r1, r9
 8005b26:	008b      	lsls	r3, r1, #2
 8005b28:	4641      	mov	r1, r8
 8005b2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b2e:	4641      	mov	r1, r8
 8005b30:	008a      	lsls	r2, r1, #2
 8005b32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b36:	f7fa ff65 	bl	8000a04 <__aeabi_uldivmod>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b74 <UART_SetConfig+0x4e4>)
 8005b40:	fba3 1302 	umull	r1, r3, r3, r2
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	2164      	movs	r1, #100	@ 0x64
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	3332      	adds	r3, #50	@ 0x32
 8005b52:	4a08      	ldr	r2, [pc, #32]	@ (8005b74 <UART_SetConfig+0x4e4>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	f003 020f 	and.w	r2, r3, #15
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4422      	add	r2, r4
 8005b66:	609a      	str	r2, [r3, #8]
}
 8005b68:	bf00      	nop
 8005b6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b74:	51eb851f 	.word	0x51eb851f

08005b78 <memset>:
 8005b78:	4402      	add	r2, r0
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d100      	bne.n	8005b82 <memset+0xa>
 8005b80:	4770      	bx	lr
 8005b82:	f803 1b01 	strb.w	r1, [r3], #1
 8005b86:	e7f9      	b.n	8005b7c <memset+0x4>

08005b88 <__libc_init_array>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	4d0d      	ldr	r5, [pc, #52]	@ (8005bc0 <__libc_init_array+0x38>)
 8005b8c:	4c0d      	ldr	r4, [pc, #52]	@ (8005bc4 <__libc_init_array+0x3c>)
 8005b8e:	1b64      	subs	r4, r4, r5
 8005b90:	10a4      	asrs	r4, r4, #2
 8005b92:	2600      	movs	r6, #0
 8005b94:	42a6      	cmp	r6, r4
 8005b96:	d109      	bne.n	8005bac <__libc_init_array+0x24>
 8005b98:	4d0b      	ldr	r5, [pc, #44]	@ (8005bc8 <__libc_init_array+0x40>)
 8005b9a:	4c0c      	ldr	r4, [pc, #48]	@ (8005bcc <__libc_init_array+0x44>)
 8005b9c:	f000 f818 	bl	8005bd0 <_init>
 8005ba0:	1b64      	subs	r4, r4, r5
 8005ba2:	10a4      	asrs	r4, r4, #2
 8005ba4:	2600      	movs	r6, #0
 8005ba6:	42a6      	cmp	r6, r4
 8005ba8:	d105      	bne.n	8005bb6 <__libc_init_array+0x2e>
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb0:	4798      	blx	r3
 8005bb2:	3601      	adds	r6, #1
 8005bb4:	e7ee      	b.n	8005b94 <__libc_init_array+0xc>
 8005bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bba:	4798      	blx	r3
 8005bbc:	3601      	adds	r6, #1
 8005bbe:	e7f2      	b.n	8005ba6 <__libc_init_array+0x1e>
 8005bc0:	08005c24 	.word	0x08005c24
 8005bc4:	08005c24 	.word	0x08005c24
 8005bc8:	08005c24 	.word	0x08005c24
 8005bcc:	08005c28 	.word	0x08005c28

08005bd0 <_init>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	bf00      	nop
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr

08005bdc <_fini>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr
